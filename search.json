[
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "src/Data/02_supervised_ML_regression.html",
    "href": "src/Data/02_supervised_ML_regression.html",
    "title": "Supervised ML Regression",
    "section": "",
    "text": "# Standard\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.1     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n# Modeling\nlibrary(parsnip)\n\n# Preprocessing & Sampling\nlibrary(recipes)\n\n\nAttaching package: 'recipes'\n\nThe following object is masked from 'package:stringr':\n\n    fixed\n\nThe following object is masked from 'package:stats':\n\n    step\n\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\nFor binary classification, the first factor level is assumed to be the event.\nUse the argument `event_level = \"second\"` to alter this as needed.\n\nAttaching package: 'yardstick'\n\nThe following object is masked from 'package:readr':\n\n    spec\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\nLoading required package: rpart\n\n\n\n# Modeling ----------------------------------------------------------------\nbike_orderlines_tbl <- readRDS(\"bike_orderlines.rds\")\nglimpse(bike_orderlines_tbl)\n\nRows: 15,644\nColumns: 18\n$ order_id       <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7~\n$ order_line     <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1~\n$ order_date     <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-0~\n$ model          <chr> \"Spectral CF 7 WMN\", \"Ultimate CF SLX Disc 8.0 ETAP\", \"~\n$ model_year     <dbl> 2021, 2020, 2021, 2019, 2020, 2020, 2020, 2021, 2020, 2~\n$ category_1     <chr> \"Mountain\", \"Road\", \"Mountain\", \"Road\", \"Mountain\", \"Hy~\n$ category_2     <chr> \"Trail\", \"Race\", \"Trail\", \"Triathlon Bike\", \"Dirt Jump\"~\n$ category_3     <chr> \"Spectral\", \"Ultimate\", \"Neuron\", \"Speedmax\", \"Stitched~\n$ price          <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6~\n$ quantity       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1~\n$ total_price    <dbl> 3119, 5359, 2729, 1749, 1219, 1359, 2529, 1559, 3899, 6~\n$ frame_material <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"aluminium\", \"c~\n$ weight         <dbl> 13.80, 7.44, 14.06, 8.80, 11.50, 8.80, 8.20, 8.85, 14.4~\n$ url            <chr> \"https://www.canyon.com/en-de/mountain-bikes/trail-bike~\n$ bikeshop       <chr> \"AlexandeRad\", \"AlexandeRad\", \"WITT-RAD\", \"WITT-RAD\", \"~\n$ location       <chr> \"Hamburg, Hamburg\", \"Hamburg, Hamburg\", \"Bremen, Bremen~\n$ lat            <dbl> 53.57532, 53.57532, 53.07379, 53.07379, 48.78234, 48.78~\n$ lng            <dbl> 10.015340, 10.015340, 8.826754, 8.826754, 9.180819, 9.1~\n\nmodel_sales_tbl <- bike_orderlines_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n\n`summarise()` has grouped output by 'model', 'category_2'. You can override\nusing the `.groups` argument.\n\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  #coord_flip() +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(\n    title = \"Total Sales for Each Model\",\n    x = \"Frame Material\", y = \"Revenue\"\n  )\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nWarning: Groups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped.\nGroups with fewer than two data points have been dropped.\n\n\nWarning in max(data$density): kein nicht-fehlendes Argument für max; gebe -Inf\nzurück\n\n\nWarning: Computation failed in `stat_ydensity()`\nCaused by error in `$<-.data.frame`:\n! replacement has 1 row, data has 0\n\n\n\n\n\n\n\n\nbike_features_tbl <- readRDS(\"bike_features_tbl.rds\")\nglimpse(bike_features_tbl)\n\nRows: 231\nColumns: 67\n$ bike_id                     <dbl> 2875, 2873, 2874, 2876, 2877, 2225, 2091, ~\n$ model                       <chr> \"Aeroad CF SL Disc 8.0 Di2\", \"Aeroad CF SL~\n$ model_year                  <dbl> 2020, 2020, 2020, 2020, 2020, 2019, 2019, ~\n$ frame_material              <chr> \"carbon\", \"carbon\", \"carbon\", \"carbon\", \"c~\n$ weight                      <dbl> 7.60, 7.27, 7.10, 7.73, 7.83, 6.80, 6.80, ~\n$ price                       <dbl> 4579, 6919, 6429, 5069, 3609, 6139, 5359, ~\n$ category_1                  <chr> \"Road\", \"Road\", \"Road\", \"Road\", \"Road\", \"R~\n$ category_2                  <chr> \"Race\", \"Race\", \"Race\", \"Race\", \"Race\", \"R~\n$ category_3                  <chr> \"Aeroad\", \"Aeroad\", \"Aeroad\", \"Aeroad\", \"A~\n$ gender                      <chr> \"unisex\", \"unisex\", \"unisex\", \"unisex\", \"u~\n$ url                         <chr> \"https://www.canyon.com/en-de/road-bikes/r~\n$ Frame                       <chr> \"Canyon Aeroad CF SL Disc\", \"Canyon Aeroad~\n$ Fork                        <chr> \"Canyon FK0041 CF SLX Disc\", \"Canyon FK004~\n$ `Rear Derailleur`           <chr> \"Shimano Ultegra Di2 R8050 SS\", \"SRAM RED ~\n$ `Front Derailleur`          <chr> \"Shimano Ultegra Di2 R8050\", \"SRAM RED eTa~\n$ Cassette                    <chr> \"Shimano Ultegra R8000, 11-speed, 11-28T\",~\n$ Crank                       <chr> \"Shimano Ultegra R8000\", \"SRAM RED D1\", \"S~\n$ `Bottom bracket`            <chr> \"Shimano Pressfit BB72\", \"SRAM Pressfit RE~\n$ `Thru Axle`                 <chr> \"Canyon Thru Axle\", \"Canyon Thru Axle\", \"C~\n$ Cockpit                     <chr> \"Canyon H36 Aerocockpit CF\", \"Canyon H36 A~\n$ Saddle                      <chr> \"Selle Italia SLR\", \"Selle Italia SLR\", \"S~\n$ Seatpost                    <chr> \"Canyon S27 Aero VCLS CF\", \"Canyon S27 Aer~\n$ Pedals                      <chr> \"None included\", \"None included\", \"None in~\n$ `Derailleur hanger`         <chr> \"Shop Derailleur Hanger GP0211-01\", \"Shop ~\n$ Battery                     <chr> \"\", \"SRAM eTap Powerpack\", \"\", \"SRAM eTap ~\n$ Brake                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Shift Lever`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano Di2 Remot~\n$ Chain                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"Shimano CN-HG901 ~\n$ Stem                        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon V13\", ~\n$ Handlebar                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Canyon H16 Ae~\n$ Headset                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Motor                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Battery Charger`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Flat Pedals`               <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Chainguard                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Aero Bar`                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Brake Lever / Master`      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Wheel Tire System`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Suspension Fork`           <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Disc Brake`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Grips                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Chainring                   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Display                     <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Modeswitch                  <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Rear Shock`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Light                       <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ Fender                      <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Bike Racks`                <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Brake 1`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou~\n$ `Brake 2`                   <chr> \"\", \"\", \"\", \"\", \"\", \"SRAM S-900 Direct Mou~\n$ `Shift-/ Brake Lever 1`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR~\n$ `Shift-/ Brake Lever 2`     <chr> \"Shimano Ultegra Di2 R8070, 11-speed\", \"SR~\n$ `Wheel 1`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1~\n$ `Wheel 2`                   <chr> \"DT Swiss ARC 1400 Dicut\", \"DT Swiss ARC 1~\n$ `Tyre 1`                    <chr> \"Continental Grand Prix 5000 / Attack  23 ~\n$ `Tyre 2`                    <chr> \"Continental Grand Prix 5000, 25 mm\", \"Con~\n$ `Handlebar Tape 1`          <chr> \"Canyon Ergospeed Gel\", \"Canyon Ergospeed ~\n$ `Handlebar Tape 2`          <chr> \"Canyon bar-end plug\", \"Canyon bar-end plu~\n$ `Manuals and Accessories 1` <chr> \"Canyon tool case\", \"Canyon tool case\", \"C~\n$ `Manuals and Accessories 2` <chr> \"DT Swiss warranty & intended use manual\",~\n$ `Manuals and Accessories 3` <chr> \"Canyon starter box\", \"Canyon starter box\"~\n$ `Manuals and Accessories 4` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"BAG R~\n$ `Manuals and Accessories 5` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Manuals and Accessories 6` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Manuals and Accessories 7` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Manuals and Accessories 8` <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"~\n$ `Brake Rotor`               <list> \"Shimano RT800\", \"SRAM Centerline X\", \"Sh~\n\n  # 2.0 TRAINING & TEST SETS ----\nbike_features_tbl <- bike_features_tbl %>% \n  \n  mutate(id = row_number()) %>% \n  \n  select(id, everything(), -url)\n\n\n# Create a recipe object\nbike_recipe <- recipe(price ~ frame_material + category_2 + model, data = bike_orderlines_tbl) %>% #Predict price from frame_material, category_2 and model\n  step_dummy(all_nominal(),-frame_material,-category_2,-model,one_hot = T) %>% #Remove all others\n  prep() #Estimate the required parameters\n\n\nbike_orderlines_tbl %>% distinct(category_2)\n\n# A tibble: 20 x 1\n   category_2    \n   <chr>         \n 1 Trail         \n 2 Race          \n 3 Triathlon Bike\n 4 Dirt Jump     \n 5 City          \n 6 Cyclocross    \n 7 Enduro        \n 8 E-Mountain    \n 9 All-Road      \n10 Endurance     \n11 E-City        \n12 Cross-Country \n13 Touring       \n14 E-Gravel      \n15 Adventure     \n16 Downhill      \n17 Fat Bikes     \n18 E-Fitness     \n19 E-Trekking    \n20 E-Road        \n\n# run both following commands at the same time\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(bike_orderlines_tbl, prop   = 0.80, \n                                                       strata = \"category_2\")\n\n# Check if testing contains all category_2 values\nsplit_obj %>% training() %>% distinct(category_2)\n\n# A tibble: 20 x 1\n   category_2    \n   <chr>         \n 1 Triathlon Bike\n 2 Dirt Jump     \n 3 City          \n 4 Enduro        \n 5 E-Mountain    \n 6 Endurance     \n 7 E-City        \n 8 Touring       \n 9 Cross-Country \n10 E-Gravel      \n11 E-Fitness     \n12 Cyclocross    \n13 Downhill      \n14 E-Trekking    \n15 All-Road      \n16 Fat Bikes     \n17 Adventure     \n18 E-Road        \n19 Race          \n20 Trail         \n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n# A tibble: 19 x 1\n   category_2    \n   <chr>         \n 1 Triathlon Bike\n 2 Race          \n 3 E-City        \n 4 Trail         \n 5 Cross-Country \n 6 Touring       \n 7 E-Mountain    \n 8 Dirt Jump     \n 9 All-Road      \n10 E-Fitness     \n11 Endurance     \n12 Enduro        \n13 E-Trekking    \n14 Downhill      \n15 City          \n16 Fat Bikes     \n17 Cyclocross    \n18 E-Gravel      \n19 Adventure     \n\n# Assign training and test data\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\n# We have to remove spaces and dashes from the column names\ntrain_tbl <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_tbl  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl),  \" |-\", \"_\"))\n\ntrain_transformed_tbl <- bake(bike_recipe, new_data = train_tbl) #Create training data set\ntest_transformed_tbl <- bake(bike_recipe, new_data = test_tbl) #Create testing data set\n\n\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>% #Create linear regression model\n    set_engine(\"lm\")\n\n\nlibrary(workflows)\n\n#Creating workflow\nworkflow <- workflow(preprocessor = NULL, spec = NULL) %>% \n  workflows::add_recipe(bike_recipe) %>% #Adding recipe\n  workflows::add_model(model_01_linear_lm_simple) #Adding model\n\nfitted_workflow <- fit(workflow, train_transformed_tbl) #Estimate model parameters from training set\n\nmetrics <- fitted_workflow %>%\n           predict(new_data = test_transformed_tbl) %>% #Predict from test data set\n           bind_cols(test_transformed_tbl %>% select(price)) %>%\n           yardstick::metrics(truth = price, estimate = .pred) %>% print() #Print yardstick metrics\n\nWarning in predict.lm(object = object$fit, newdata = new_data, type =\n\"response\"): prediction from a rank-deficient fit may be misleading\n\n\n# A tibble: 3 x 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      56.0  \n2 rsq     standard       0.999\n3 mae     standard       7.40"
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html",
    "title": "Automated Maschine Learning with H2O",
    "section": "",
    "text": "library(h2o)\n\n\n----------------------------------------------------------------------\n\nYour next step is to start H2O:\n    > h2o.init()\n\nFor H2O package documentation, ask for help:\n    > ??h2o\n\nAfter starting H2O, you can use the Web UI at http://localhost:54321\nFor more information visit https://docs.h2o.ai\n\n----------------------------------------------------------------------\n\n\n\nAttaching package: 'h2o'\n\n\nThe following objects are masked from 'package:stats':\n\n    cor, sd, var\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n    colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n    log10, log1p, log2, round, signif, trunc\n\n# To launch H2O locally with default initialization arguments, use the following: \nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         1 hours 5 minutes \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.1 \n    H2O cluster version age:    3 months and 11 days \n    H2O cluster name:           H2O_started_from_R_Chris_yuh446 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   3.98 GB \n    H2O cluster total cores:    12 \n    H2O cluster allowed cores:  12 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.0.5 (2021-03-31) \n\n\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.1     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx lubridate::day()   masks h2o::day()\nx dplyr::filter()    masks stats::filter()\nx lubridate::hour()  masks h2o::hour()\nx dplyr::lag()       masks stats::lag()\nx lubridate::month() masks h2o::month()\nx lubridate::week()  masks h2o::week()\nx lubridate::year()  masks h2o::year()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\ncar_stats <- function(groupby_var, measure_var) {\n    groupby_var <- enquo(groupby_var)\n    measure_var <- enquo(measure_var)\n    ret <- mtcars %>% \n             group_by(!!groupby_var) %>%\n             summarize(min = min(!!measure_var), max = max(!!measure_var)) %>%\n             # Optional: as_label() and \"walrus operator\" :=\n             mutate(measure_var = as_label(measure_var), !!measure_var := \"test\")\n    return(ret)\n}\ncar_stats(cyl,hp)\n\n# A tibble: 3 x 5\n    cyl   min   max measure_var hp   \n  <dbl> <dbl> <dbl> <chr>       <chr>\n1     4    52   113 hp          test \n2     6   105   175 hp          test \n3     8   150   335 hp          test \n\nscatter_plot <- function(data, x_var, y_var) {\n  x_var <- enquo(x_var)\n  y_var <- enquo(y_var)\n  ret <- data %>% \n           ggplot(aes(x = !!x_var, y = !!y_var)) + \n           geom_point() + \n           geom_smooth() +\n           ggtitle(str_c(as_label(y_var), \" vs. \",as_label(x_var)))\n  return(ret)\n}\nscatter_plot(mtcars, cyl, hp)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 3.98\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 4.02\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 2.0055e-016\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 16.16\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n3.98\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n4.02\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 2.0055e-016\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 16.16\n\n\n\n\n\n\n\n\n\n\nlibrary(readr)\n# Load data\nemployee_attrition_tbl <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\nRows: 1470 Columns: 35\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\ndbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Business & Data Understanding: Department and Job Role\n\n# Data subset\ndept_job_role_tbl <- employee_attrition_tbl %>%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\n\ndept_job_role_tbl %>%\n\n  group_by(Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  mutate(pct = n / sum(n))\n\n# A tibble: 2 x 3\n  Attrition     n   pct\n  <chr>     <int> <dbl>\n1 No         1233 0.839\n2 Yes         237 0.161\n\n# Attrition by department\ndept_job_role_tbl %>%\n\n  # Block 1\n  group_by(Department, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n\n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %>%\n  mutate(pct = n / sum(n))\n\n`summarise()` has grouped output by 'Department'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 x 4\n# Groups:   Department [3]\n  Department             Attrition     n   pct\n  <chr>                  <chr>     <int> <dbl>\n1 Human Resources        No           51 0.810\n2 Human Resources        Yes          12 0.190\n3 Research & Development No          828 0.862\n4 Research & Development Yes         133 0.138\n5 Sales                  No          354 0.794\n6 Sales                  Yes          92 0.206\n\n# Attrition by job role\ndept_job_role_tbl %>%\n\n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n\n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n\n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n`summarise()` has grouped output by 'Department', 'JobRole'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 10 x 5\n   Department             JobRole                   Attrition     n    pct\n   <chr>                  <chr>                     <chr>     <int>  <dbl>\n 1 Human Resources        Human Resources           Yes          12 0.231 \n 2 Research & Development Healthcare Representative Yes           9 0.0687\n 3 Research & Development Laboratory Technician     Yes          62 0.239 \n 4 Research & Development Manager                   Yes           3 0.0556\n 5 Research & Development Manufacturing Director    Yes          10 0.0690\n 6 Research & Development Research Director         Yes           2 0.025 \n 7 Research & Development Research Scientist        Yes          47 0.161 \n 8 Sales                  Manager                   Yes           2 0.0541\n 9 Sales                  Sales Executive           Yes          57 0.175 \n10 Sales                  Sales Representative      Yes          33 0.398 \n\n\n\n# Use this\n# Function to convert counts to percentages. \ncount_to_pct <- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr <- quos(...)\n  col_expr <- enquo(col)\n  ret <- data %>%\n    group_by(!!! grouping_vars_expr) %>%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %>%\n    ungroup()\n  return(ret)\n}\n\nassess_attrition <- function(data, attrition_col, attrition_value, baseline_pct) {\n\n  attrition_col_expr <- enquo(attrition_col)\n\n  data %>%\n  \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %>%\n    arrange(desc(pct)) %>%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct > baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n\n}\n\n# Function to calculate attrition cost\ncalculate_attrition_cost <- function(\n\n  # Employee\n  n                    = 1,\n  salary               = 80000,\n\n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n\n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n\n) {\n\n  # Direct Costs\n  direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n\n  # Lost Productivity Costs\n  productivity_cost <- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n\n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open\n\n  # Estimated Turnover Per Employee\n  cost_per_employee <- direct_cost + productivity_cost - salary_benefit_reduction\n\n  # Total Cost of Employee Turnover\n  total_cost <- n * cost_per_employee\n\n  return(total_cost)\n\n}\n\n# Function to plot attrition\nplot_attrition <- function(data, \n                           ..., \n                           .value,\n                           fct_reorder = TRUE,\n                           fct_rev     = FALSE,\n                           include_lbl = TRUE,\n                           color       = \"#2dc6d6\",\n                           units       = c(\"0\", \"K\", \"M\")) {\n\n  ### Inputs\n  group_vars_expr   <- quos(...)\n  \n  # If the user does not supply anything, \n  # this takes the first column of the supplied data\n  if (length(group_vars_expr) == 0) {\n    group_vars_expr <- quos(rlang::sym(colnames(data)[[1]]))\n    }\n\n  value_expr <- enquo(.value)\n\n  units_val  <- switch(units[[1]],\n                       \"M\" = 1e6,\n                       \"K\" = 1e3,\n                       \"0\" = 1)\n  if (units[[1]] == \"0\") units <- \"\"\n\n  # Data Manipulation\n  # This is a so called Function Factory (a function that produces a function)\n  usd <- scales::dollar_format(prefix = \"$\", largest_with_cents = 1e3)\n\n  # Create the axis labels and values for the plot\n  data_manipulated <- data %>%\n    mutate(name = str_c(!!! group_vars_expr, sep = \": \") %>% as_factor()) %>%\n    mutate(value_text = str_c(usd(!! value_expr / units_val),\n                              units[[1]], sep = \"\"))\n\n  \n  # Order the labels on the y-axis according to the input\n  if (fct_reorder) {\n    data_manipulated <- data_manipulated %>%\n      mutate(name = forcats::fct_reorder(name, !! value_expr)) %>%\n      arrange(name)\n  }\n\n  if (fct_rev) {\n    data_manipulated <- data_manipulated %>%\n      mutate(name = forcats::fct_rev(name)) %>%\n      arrange(name)\n  }\n\n  # Visualization\n  g <- data_manipulated %>%\n\n        # \"name\" is a column name generated by our function internally as part of the data manipulation task\n        ggplot(aes(x = (!! value_expr), y = name)) +\n        geom_segment(aes(xend = 0, yend = name), color = color) +\n        geom_point(aes(size = !! value_expr), color = color) +\n        scale_x_continuous(labels = scales::dollar) +\n        scale_size(range = c(3, 5)) +\n        theme(legend.position = \"none\")\n\n  # Plot labels if TRUE\n  if (include_lbl) {\n    g <- g +\n      geom_label(aes(label = value_text, size = !! value_expr),\n                 hjust = \"inward\", color = color)\n  }\n\n  return(g)\n\n}\n\ndept_job_role_tbl %>%\n\n  # Block 1\n  count(Department, JobRole, Attrition) %>%\n\n  # Block 2\n  count_to_pct(Department, JobRole) %>%  \n\n  # Block 3\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n\n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n\n  # Select columnns\n  plot_attrition(Department, JobRole, .value = cost_of_attrition,\n                 units = \"M\") +\n  labs(\n    title = \"Estimated Cost of Attrition by Job Role\",\n    x = \"Cost of Attrition\",\n    subtitle = \"Looks like Sales Executive and Labaratory Technician are the biggest drivers of cost\"\n  )\n\n\n\n\n\n\n\n\n\n# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n# Load Data data definitions\n\npath_data_definitions <- \"data_definitions.xlsx\"\ndefinitions_raw_tbl   <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nNew names:\n* `` -> `...1`\n* `` -> `...2`\n\nemployee_attrition_tbl\n\n# A tibble: 1,470 x 35\n     Age Attrition BusinessTravel    DailyRate Department       DistanceFromHome\n   <dbl> <chr>     <chr>                 <dbl> <chr>                       <dbl>\n 1    41 Yes       Travel_Rarely          1102 Sales                           1\n 2    49 No        Travel_Frequently       279 Research & Deve~                8\n 3    37 Yes       Travel_Rarely          1373 Research & Deve~                2\n 4    33 No        Travel_Frequently      1392 Research & Deve~                3\n 5    27 No        Travel_Rarely           591 Research & Deve~                2\n 6    32 No        Travel_Frequently      1005 Research & Deve~                2\n 7    59 No        Travel_Rarely          1324 Research & Deve~                3\n 8    30 No        Travel_Rarely          1358 Research & Deve~               24\n 9    38 No        Travel_Frequently       216 Research & Deve~               23\n10    36 No        Travel_Rarely          1299 Research & Deve~               27\n# i 1,460 more rows\n# i 29 more variables: Education <dbl>, EducationField <chr>,\n#   EmployeeCount <dbl>, EmployeeNumber <dbl>, EnvironmentSatisfaction <dbl>,\n#   Gender <chr>, HourlyRate <dbl>, JobInvolvement <dbl>, JobLevel <dbl>,\n#   JobRole <chr>, JobSatisfaction <dbl>, MaritalStatus <chr>,\n#   MonthlyIncome <dbl>, MonthlyRate <dbl>, NumCompaniesWorked <dbl>,\n#   Over18 <chr>, OverTime <chr>, PercentSalaryHike <dbl>, ...\n\n# Descriptive Features\nemployee_attrition_tbl %>% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n# A tibble: 1,470 x 6\n     Age DistanceFromHome Gender MaritalStatus NumCompaniesWorked Over18\n   <dbl>            <dbl> <chr>  <chr>                      <dbl> <chr> \n 1    41                1 Female Single                         8 Y     \n 2    49                8 Male   Married                        1 Y     \n 3    37                2 Male   Single                         6 Y     \n 4    33                3 Female Married                        1 Y     \n 5    27                2 Male   Married                        9 Y     \n 6    32                2 Male   Single                         0 Y     \n 7    59                3 Female Married                        4 Y     \n 8    30               24 Male   Divorced                       1 Y     \n 9    38               23 Male   Single                         0 Y     \n10    36               27 Male   Married                        6 Y     \n# i 1,460 more rows\n\n# Employment Features\nemployee_attrition_tbl %>% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n# A tibble: 1,470 x 7\n   Department       EmployeeCount EmployeeNumber JobInvolvement JobLevel JobRole\n   <chr>                    <dbl>          <dbl>          <dbl>    <dbl> <chr>  \n 1 Sales                        1              1              3        2 Sales ~\n 2 Research & Deve~             1              2              2        2 Resear~\n 3 Research & Deve~             1              4              2        1 Labora~\n 4 Research & Deve~             1              5              3        1 Resear~\n 5 Research & Deve~             1              7              3        1 Labora~\n 6 Research & Deve~             1              8              3        1 Labora~\n 7 Research & Deve~             1             10              4        1 Labora~\n 8 Research & Deve~             1             11              3        1 Labora~\n 9 Research & Deve~             1             12              2        3 Manufa~\n10 Research & Deve~             1             13              3        2 Health~\n# i 1,460 more rows\n# i 1 more variable: JobSatisfaction <dbl>\n\n# Compensation Features\nemployee_attrition_tbl %>% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n# A tibble: 1,470 x 6\n   DailyRate HourlyRate MonthlyIncome MonthlyRate PercentSalaryHike\n       <dbl>      <dbl>         <dbl>       <dbl>             <dbl>\n 1      1102         94          5993       19479                11\n 2       279         61          5130       24907                23\n 3      1373         92          2090        2396                15\n 4      1392         56          2909       23159                11\n 5       591         40          3468       16632                12\n 6      1005         79          3068       11864                13\n 7      1324         81          2670        9964                20\n 8      1358         67          2693       13335                22\n 9       216         44          9526        8787                21\n10      1299         94          5237       16577                13\n# i 1,460 more rows\n# i 1 more variable: StockOptionLevel <dbl>\n\n# Survery Results\nemployee_attrition_tbl %>% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n# A tibble: 1,470 x 4\n   EnvironmentSatisfact~1 JobSatisfaction RelationshipSatisfac~2 WorkLifeBalance\n                    <dbl>           <dbl>                  <dbl>           <dbl>\n 1                      2               4                      1               1\n 2                      3               2                      4               3\n 3                      4               3                      2               3\n 4                      4               3                      3               3\n 5                      1               2                      4               3\n 6                      4               4                      3               2\n 7                      3               1                      1               2\n 8                      4               3                      2               3\n 9                      4               3                      2               3\n10                      3               3                      2               2\n# i 1,460 more rows\n# i abbreviated names: 1: EnvironmentSatisfaction, 2: RelationshipSatisfaction\n\n# Performance Data\nemployee_attrition_tbl %>% select(JobInvolvement, PerformanceRating)\n\n# A tibble: 1,470 x 2\n   JobInvolvement PerformanceRating\n            <dbl>             <dbl>\n 1              3                 3\n 2              2                 4\n 3              2                 3\n 4              3                 3\n 5              3                 3\n 6              3                 3\n 7              4                 4\n 8              3                 4\n 9              2                 4\n10              3                 3\n# i 1,460 more rows\n\n# Work-Life Features\nemployee_attrition_tbl %>% select(BusinessTravel, OverTime)\n\n# A tibble: 1,470 x 2\n   BusinessTravel    OverTime\n   <chr>             <chr>   \n 1 Travel_Rarely     Yes     \n 2 Travel_Frequently No      \n 3 Travel_Rarely     Yes     \n 4 Travel_Frequently Yes     \n 5 Travel_Rarely     No      \n 6 Travel_Frequently No      \n 7 Travel_Rarely     Yes     \n 8 Travel_Rarely     No      \n 9 Travel_Frequently No      \n10 Travel_Rarely     No      \n# i 1,460 more rows\n\n# Training & Education\nemployee_attrition_tbl %>% select(Education, EducationField, TrainingTimesLastYear)\n\n# A tibble: 1,470 x 3\n   Education EducationField TrainingTimesLastYear\n       <dbl> <chr>                          <dbl>\n 1         2 Life Sciences                      0\n 2         1 Life Sciences                      3\n 3         2 Other                              3\n 4         4 Life Sciences                      3\n 5         1 Medical                            3\n 6         2 Life Sciences                      2\n 7         3 Medical                            3\n 8         1 Life Sciences                      2\n 9         3 Life Sciences                      2\n10         3 Medical                            3\n# i 1,460 more rows\n\n# Time-Based Features\nemployee_attrition_tbl %>% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n# A tibble: 1,470 x 5\n   TotalWorkingYears YearsAtCompany YearsInCurrentRole YearsSinceLastPromotion\n               <dbl>          <dbl>              <dbl>                   <dbl>\n 1                 8              6                  4                       0\n 2                10             10                  7                       1\n 3                 7              0                  0                       0\n 4                 8              8                  7                       3\n 5                 6              2                  2                       2\n 6                 8              7                  7                       3\n 7                12              1                  0                       0\n 8                 1              1                  0                       0\n 9                10              9                  7                       1\n10                17              7                  7                       7\n# i 1,460 more rows\n# i 1 more variable: YearsWithCurrManager <dbl>\n\n\n\n# Step 1: Data Summarization -----\n\nskim(employee_attrition_tbl)\n\n\nData summary\n\n\nName\nemployee_attrition_tbl\n\n\nNumber of rows\n1470\n\n\nNumber of columns\n35\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nnumeric\n26\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAttrition\n0\n1\n2\n3\n0\n2\n0\n\n\nBusinessTravel\n0\n1\n10\n17\n0\n3\n0\n\n\nDepartment\n0\n1\n5\n22\n0\n3\n0\n\n\nEducationField\n0\n1\n5\n16\n0\n6\n0\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nJobRole\n0\n1\n7\n25\n0\n9\n0\n\n\nMaritalStatus\n0\n1\n6\n8\n0\n3\n0\n\n\nOver18\n0\n1\n1\n1\n0\n1\n0\n\n\nOverTime\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n36.92\n9.14\n18\n30.00\n36.0\n43.00\n60\n▂▇▇▃▂\n\n\nDailyRate\n0\n1\n802.49\n403.51\n102\n465.00\n802.0\n1157.00\n1499\n▇▇▇▇▇\n\n\nDistanceFromHome\n0\n1\n9.19\n8.11\n1\n2.00\n7.0\n14.00\n29\n▇▅▂▂▂\n\n\nEducation\n0\n1\n2.91\n1.02\n1\n2.00\n3.0\n4.00\n5\n▂▃▇▆▁\n\n\nEmployeeCount\n0\n1\n1.00\n0.00\n1\n1.00\n1.0\n1.00\n1\n▁▁▇▁▁\n\n\nEmployeeNumber\n0\n1\n1024.87\n602.02\n1\n491.25\n1020.5\n1555.75\n2068\n▇▇▇▇▇\n\n\nEnvironmentSatisfaction\n0\n1\n2.72\n1.09\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nHourlyRate\n0\n1\n65.89\n20.33\n30\n48.00\n66.0\n83.75\n100\n▇▇▇▇▇\n\n\nJobInvolvement\n0\n1\n2.73\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▁\n\n\nJobLevel\n0\n1\n2.06\n1.11\n1\n1.00\n2.0\n3.00\n5\n▇▇▃▂▁\n\n\nJobSatisfaction\n0\n1\n2.73\n1.10\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nMonthlyIncome\n0\n1\n6502.93\n4707.96\n1009\n2911.00\n4919.0\n8379.00\n19999\n▇▅▂▁▂\n\n\nMonthlyRate\n0\n1\n14313.10\n7117.79\n2094\n8047.00\n14235.5\n20461.50\n26999\n▇▇▇▇▇\n\n\nNumCompaniesWorked\n0\n1\n2.69\n2.50\n0\n1.00\n2.0\n4.00\n9\n▇▃▂▂▁\n\n\nPercentSalaryHike\n0\n1\n15.21\n3.66\n11\n12.00\n14.0\n18.00\n25\n▇▅▃▂▁\n\n\nPerformanceRating\n0\n1\n3.15\n0.36\n3\n3.00\n3.0\n3.00\n4\n▇▁▁▁▂\n\n\nRelationshipSatisfaction\n0\n1\n2.71\n1.08\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nStandardHours\n0\n1\n80.00\n0.00\n80\n80.00\n80.0\n80.00\n80\n▁▁▇▁▁\n\n\nStockOptionLevel\n0\n1\n0.79\n0.85\n0\n0.00\n1.0\n1.00\n3\n▇▇▁▂▁\n\n\nTotalWorkingYears\n0\n1\n11.28\n7.78\n0\n6.00\n10.0\n15.00\n40\n▇▇▂▁▁\n\n\nTrainingTimesLastYear\n0\n1\n2.80\n1.29\n0\n2.00\n3.0\n3.00\n6\n▂▇▇▂▃\n\n\nWorkLifeBalance\n0\n1\n2.76\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▂\n\n\nYearsAtCompany\n0\n1\n7.01\n6.13\n0\n3.00\n5.0\n9.00\n40\n▇▂▁▁▁\n\n\nYearsInCurrentRole\n0\n1\n4.23\n3.62\n0\n2.00\n3.0\n7.00\n18\n▇▃▂▁▁\n\n\nYearsSinceLastPromotion\n0\n1\n2.19\n3.22\n0\n0.00\n1.0\n3.00\n15\n▇▁▁▁▁\n\n\nYearsWithCurrManager\n0\n1\n4.12\n3.57\n0\n2.00\n3.0\n7.00\n17\n▇▂▅▁▁\n\n\n\n\n# Character Data Type\nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    glimpse()\n\nRows: 1,470\nColumns: 9\n$ Attrition      <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",~\n$ BusinessTravel <chr> \"Travel_Rarely\", \"Travel_Frequently\", \"Travel_Rarely\", ~\n$ Department     <chr> \"Sales\", \"Research & Development\", \"Research & Developm~\n$ EducationField <chr> \"Life Sciences\", \"Life Sciences\", \"Other\", \"Life Scienc~\n$ Gender         <chr> \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Fe~\n$ JobRole        <chr> \"Sales Executive\", \"Research Scientist\", \"Laboratory Te~\n$ MaritalStatus  <chr> \"Single\", \"Married\", \"Single\", \"Married\", \"Married\", \"S~\n$ Over18         <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", ~\n$ OverTime       <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No~\n\n# Get \"levels\"\nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    map(unique)\n\n$Attrition\n[1] \"Yes\" \"No\" \n\n$BusinessTravel\n[1] \"Travel_Rarely\"     \"Travel_Frequently\" \"Non-Travel\"       \n\n$Department\n[1] \"Sales\"                  \"Research & Development\" \"Human Resources\"       \n\n$EducationField\n[1] \"Life Sciences\"    \"Other\"            \"Medical\"          \"Marketing\"       \n[5] \"Technical Degree\" \"Human Resources\" \n\n$Gender\n[1] \"Female\" \"Male\"  \n\n$JobRole\n[1] \"Sales Executive\"           \"Research Scientist\"       \n[3] \"Laboratory Technician\"     \"Manufacturing Director\"   \n[5] \"Healthcare Representative\" \"Manager\"                  \n[7] \"Sales Representative\"      \"Research Director\"        \n[9] \"Human Resources\"          \n\n$MaritalStatus\n[1] \"Single\"   \"Married\"  \"Divorced\"\n\n$Over18\n[1] \"Y\"\n\n$OverTime\n[1] \"Yes\" \"No\" \n\n# Proportions    \nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    map(~ table(.) %>% prop.table())\n\n$Attrition\n.\n       No       Yes \n0.8387755 0.1612245 \n\n$BusinessTravel\n.\n       Non-Travel Travel_Frequently     Travel_Rarely \n        0.1020408         0.1884354         0.7095238 \n\n$Department\n.\n       Human Resources Research & Development                  Sales \n            0.04285714             0.65374150             0.30340136 \n\n$EducationField\n.\n Human Resources    Life Sciences        Marketing          Medical \n      0.01836735       0.41224490       0.10816327       0.31564626 \n           Other Technical Degree \n      0.05578231       0.08979592 \n\n$Gender\n.\nFemale   Male \n   0.4    0.6 \n\n$JobRole\n.\nHealthcare Representative           Human Resources     Laboratory Technician \n               0.08911565                0.03537415                0.17619048 \n                  Manager    Manufacturing Director         Research Director \n               0.06938776                0.09863946                0.05442177 \n       Research Scientist           Sales Executive      Sales Representative \n               0.19863946                0.22176871                0.05646259 \n\n$MaritalStatus\n.\n Divorced   Married    Single \n0.2224490 0.4578231 0.3197279 \n\n$Over18\n.\nY \n1 \n\n$OverTime\n.\n       No       Yes \n0.7170068 0.2829932 \n\n# Numeric Data\nemployee_attrition_tbl %>%\n    select_if(is.numeric) %>%\n    map(~ unique(.) %>% length())\n\n$Age\n[1] 43\n\n$DailyRate\n[1] 886\n\n$DistanceFromHome\n[1] 29\n\n$Education\n[1] 5\n\n$EmployeeCount\n[1] 1\n\n$EmployeeNumber\n[1] 1470\n\n$EnvironmentSatisfaction\n[1] 4\n\n$HourlyRate\n[1] 71\n\n$JobInvolvement\n[1] 4\n\n$JobLevel\n[1] 5\n\n$JobSatisfaction\n[1] 4\n\n$MonthlyIncome\n[1] 1349\n\n$MonthlyRate\n[1] 1427\n\n$NumCompaniesWorked\n[1] 10\n\n$PercentSalaryHike\n[1] 15\n\n$PerformanceRating\n[1] 2\n\n$RelationshipSatisfaction\n[1] 4\n\n$StandardHours\n[1] 1\n\n$StockOptionLevel\n[1] 4\n\n$TotalWorkingYears\n[1] 40\n\n$TrainingTimesLastYear\n[1] 7\n\n$WorkLifeBalance\n[1] 4\n\n$YearsAtCompany\n[1] 37\n\n$YearsInCurrentRole\n[1] 19\n\n$YearsSinceLastPromotion\n[1] 16\n\n$YearsWithCurrManager\n[1] 18\n\nemployee_attrition_tbl %>%\n    select_if(is.numeric) %>%\n    map_df(~ unique(.) %>% length()) %>%\n    # Select all columns\n    pivot_longer(everything()) %>%\n    arrange(value) %>%\n    filter(value <= 10)\n\n# A tibble: 13 x 2\n   name                     value\n   <chr>                    <int>\n 1 EmployeeCount                1\n 2 StandardHours                1\n 3 PerformanceRating            2\n 4 EnvironmentSatisfaction      4\n 5 JobInvolvement               4\n 6 JobSatisfaction              4\n 7 RelationshipSatisfaction     4\n 8 StockOptionLevel             4\n 9 WorkLifeBalance              4\n10 Education                    5\n11 JobLevel                     5\n12 TrainingTimesLastYear        7\n13 NumCompaniesWorked          10\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\n\n# Create data tibble, to potentially debug the plot_ggpairs function (because it has a data argument)\ndata <- employee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr <- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g <- data %>%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name <- quo_name(color_expr)\n        \n        g <- data %>%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}\n\nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    plot_ggpairs(color = Attrition)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\ni Please use tidy evaluation idioms with `aes()`.\ni See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n\n# Explore Features by Category\n\n#   1. Descriptive features: age, gender, marital status \nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   2. Employment features: department, job role, job level\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %>%\n    plot_ggpairs(Attrition) \n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\nWarning in cor(x, y): Standardabweichung ist Null\n\n\n\n\n\n\n\n\n#   3. Compensation features: HourlyRate, MonthlyIncome, StockOptionLevel \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   4. Survey Results: Satisfaction level, WorkLifeBalance \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   5. Performance Data: Job Involvment, Performance Rating\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   6. Work-Life Features \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   7. Training and Education \nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n#   8. Time-Based Features: Years at company, years in current role\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"years\")) %>%\n    plot_ggpairs(Attrition)"
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-1-what-can-you-deduce-about-the-interaction-between-monthly-income-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-1-what-can-you-deduce-about-the-interaction-between-monthly-income-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 1 | What can you deduce about the interaction between Monthly Income and Attrition?",
    "text": "Question 1 | What can you deduce about the interaction between Monthly Income and Attrition?\nThere is a big spike of people having attrition at the low end of the monthly income spectrum far greater than people having no attrition with low monthly income. This indicates that monthly income has a relatively strong affect on attrition."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-2-what-can-you-deduce-about-the-interaction-between-percent-salary-hike-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-2-what-can-you-deduce-about-the-interaction-between-percent-salary-hike-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 2 | What can you deduce about the interaction between Percent Salary Hike and Attrition?",
    "text": "Question 2 | What can you deduce about the interaction between Percent Salary Hike and Attrition?\nThe attrition graph depending on the percent salary hike is nearly identical for people with attrition and without. Meaning a percent salary hike has very little effect on attrition."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-3-what-can-you-deduce-about-the-interaction-between-stock-option-level-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-3-what-can-you-deduce-about-the-interaction-between-stock-option-level-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 3 | What can you deduce about the interaction between Stock Option Level and Attrition?",
    "text": "Question 3 | What can you deduce about the interaction between Stock Option Level and Attrition?\nThe attrition vs. stock option level graph shows that people having a stock option level of 1 or to a lesser extend 2 are much less likely to have high attrition, meaning there could be a positive effect between the stock option level and attrition for the employer."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-4-what-can-you-deduce-about-the-interaction-between-environment-satisfaction-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-4-what-can-you-deduce-about-the-interaction-between-environment-satisfaction-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 4 | What can you deduce about the interaction between Environment Satisfaction and Attrition?",
    "text": "Question 4 | What can you deduce about the interaction between Environment Satisfaction and Attrition?\nFirst of all, the satisfaction levels of the survey seemed to be clumped in certain levels which is likely the result of some kind of numerical scale being used for this survey (Rate from 1 to 4 for example). Considering that, there is an upward trend in the number of people having no attrition with higher satisfaction."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-5-what-can-you-deduce-about-the-interaction-between-work-life-balance-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-5-what-can-you-deduce-about-the-interaction-between-work-life-balance-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 5 | What can you deduce about the interaction between Work Life Balance and Attrition",
    "text": "Question 5 | What can you deduce about the interaction between Work Life Balance and Attrition\nThe work life balance seems to indicate a stronger connection with attrition, with people rating their work life balance more positively having less attrition."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-6-what-can-you-deduce-about-the-interaction-between-job-involvement-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-6-what-can-you-deduce-about-the-interaction-between-job-involvement-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 6 | What Can you deduce about the interaction between Job Involvement and Attrition?",
    "text": "Question 6 | What Can you deduce about the interaction between Job Involvement and Attrition?\nPeople that are more involved in the job are less likely to have attrition."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-7-what-can-you-deduce-about-the-interaction-between-over-time-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-7-what-can-you-deduce-about-the-interaction-between-over-time-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 7 | What can you deduce about the interaction between Over Time and Attrition?",
    "text": "Question 7 | What can you deduce about the interaction between Over Time and Attrition?\nRoughly the same amount of people that have attrition do and do not perform overtime. But as a percentage, the people doing overtime are much more likely to have attrition."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-8-what-can-you-deduce-about-the-interaction-between-training-times-last-year-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-8-what-can-you-deduce-about-the-interaction-between-training-times-last-year-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 8 | What can you deduce about the interaction between Training Times Last Year and Attrition",
    "text": "Question 8 | What can you deduce about the interaction between Training Times Last Year and Attrition\nThere is a slight trend, that more training time results in less attrition but as far as I can tell very minor."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-9-what-can-you-deduce-about-the-interaction-between-years-at-company-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-9-what-can-you-deduce-about-the-interaction-between-years-at-company-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 9 | What can you deduce about the interaction between Years At Company and Attrition",
    "text": "Question 9 | What can you deduce about the interaction between Years At Company and Attrition\nRegarding years at the company for very new people the attrition is much higher than for those that are very long with the company.\nCrucially those that stay long have very low attrition, since most likely those with high attrition left at some point, so the data is inherently somewhat skewed."
  },
  {
    "objectID": "src/Data/03_automated_maschine_learning_with_H2O.html#question-10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "href": "src/Data/03_automated_maschine_learning_with_H2O.html#question-10-what-can-you-deduce-about-the-interaction-between-years-since-last-promotion-and-attrition",
    "title": "Automated Maschine Learning with H2O",
    "section": "Question 10 | What can you deduce about the interaction between Years Since Last Promotion and Attrition?",
    "text": "Question 10 | What can you deduce about the interaction between Years Since Last Promotion and Attrition?\nYears since last promotion seem to have a rather small affect on attrition but the small bump in attrition if people are longer with the company is noteworthy, meaning that people that stayed with the company for an extended amount of time without a promotion start to get more attrition."
  },
  {
    "objectID": "src/Data/04_performance_measures.html",
    "href": "src/Data/04_performance_measures.html",
    "title": "Performance Measures",
    "section": "",
    "text": "I had to move the business case to performance_measures_business_case.Rmd since otherwise multiple errors with h2o would occur."
  },
  {
    "objectID": "src/Data/04_performance_measures.html#data-loading-and-running-automl",
    "href": "src/Data/04_performance_measures.html#data-loading-and-running-automl",
    "title": "Performance Measures",
    "section": "Data loading and running AutoML",
    "text": "Data loading and running AutoML\n\nlibrary(h2o)\n\n\n----------------------------------------------------------------------\n\nYour next step is to start H2O:\n    > h2o.init()\n\nFor H2O package documentation, ask for help:\n    > ??h2o\n\nAfter starting H2O, you can use the Web UI at http://localhost:54321\nFor more information visit https://docs.h2o.ai\n\n----------------------------------------------------------------------\n\n\n\nAttaching package: 'h2o'\n\n\nThe following objects are masked from 'package:stats':\n\n    cor, sd, var\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n    colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n    log10, log1p, log2, round, signif, trunc\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.1     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n\n\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx lubridate::day()   masks h2o::day()\nx dplyr::filter()    masks stats::filter()\nx lubridate::hour()  masks h2o::hour()\nx dplyr::lag()       masks stats::lag()\nx lubridate::month() masks h2o::month()\nx lubridate::week()  masks h2o::week()\nx lubridate::year()  masks h2o::year()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(rsample)\nlibrary(recipes)\n\n\nAttaching package: 'recipes'\n\nThe following object is masked from 'package:stringr':\n\n    fixed\n\nThe following object is masked from 'package:stats':\n\n    step\n\nlibrary(readxl)\n\n#Load the training & test dataset\nemployee_attrition_tbl          <- read_csv(\"product_backorders.csv\")\n\nRows: 19053 Columns: 23\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\ndbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(employee_attrition_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\n#Specifiy the response and predictor variables\nrecipe_obj <- recipe(went_on_backorder ~., data = train_readable_tbl) %>% \n    step_zv(all_predictors()) %>% \n    #step_mutate_at(JobLevel, StockOptionLevel, fn = as.factor) %>% \n    prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# Modeling\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         4 hours 19 minutes \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.1 \n    H2O cluster version age:    3 months and 11 days \n    H2O cluster name:           H2O_started_from_R_Chris_yuh446 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   2.24 GB \n    H2O cluster total cores:    12 \n    H2O cluster allowed cores:  12 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.0.5 (2021-03-31) \n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Set the target and predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n#Run AutoML specifying the stopping criterion\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n) \n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |==                                                                    |   3%\n17:44:21.360: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n17:44:21.374: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "src/Data/04_performance_measures.html#leaderboard-visualization",
    "href": "src/Data/04_performance_measures.html#leaderboard-visualization",
    "title": "Performance Measures",
    "section": "1. Leaderboard visualization",
    "text": "1. Leaderboard visualization\n\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by <- tolower(order_by[[1]])\n\n    leaderboard_tbl <- h2o_leaderboard %>%\n        as.tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        rownames_to_column(var = \"rowname\") %>%\n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %>%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %>%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g <- data_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n  \n}  \nplot_h2o_leaderboard(automl_models_h2o@leaderboard)\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\ni Please use `as_tibble()` instead.\ni The signature and semantics have changed, see `?as_tibble`."
  },
  {
    "objectID": "src/Data/04_performance_measures.html#tune-a-model-with-grid-search",
    "href": "src/Data/04_performance_measures.html#tune-a-model-with-grid-search",
    "title": "Performance Measures",
    "section": "2. Tune a model with grid search",
    "text": "2. Tune a model with grid search\n\ndeeplearning_grid_01 <- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\nH2O Grid Details\n================\n\nGrid ID: deeplearning_grid_01 \nUsed hyper parameters: \n  -  epochs \n  -  hidden \nNumber of models: 99 \nNumber of failed models: 0 \n\nHyper-Parameter Search Summary: ordered by decreasing auc\n     epochs       hidden                     model_ids     auc\n1 101.40047 [20, 20, 20] deeplearning_grid_01_model_63 0.91089\n2 101.38146 [50, 20, 10] deeplearning_grid_01_model_87 0.90225\n3 101.38564 [20, 20, 20] deeplearning_grid_01_model_90 0.90066\n4 101.39634 [50, 20, 10] deeplearning_grid_01_model_60 0.89979\n5 101.39484 [10, 10, 10] deeplearning_grid_01_model_75 0.89815\n\n---\n     epochs       hidden                     model_ids     auc\n94 51.96841 [50, 20, 10] deeplearning_grid_01_model_50 0.76877\n95 52.82614 [20, 20, 20] deeplearning_grid_01_model_35 0.76240\n96 10.39288 [10, 10, 10] deeplearning_grid_01_model_82 0.75794\n97 10.40375 [20, 20, 20] deeplearning_grid_01_model_61 0.75390\n98 51.95353 [10, 10, 10] deeplearning_grid_01_model_47 0.71213\n99 51.96397 [10, 10, 10]  deeplearning_grid_01_model_2 0.70863\n\nbest_grid_model <- h2o.getModel(deeplearning_grid_01@model_ids[[1]])\n\nbest_grid_model %>% h2o.auc(train = T, valid = T, xval = T)\n\n    train     valid      xval \n0.9223805 0.9031623 0.9108908 \n\nbest_grid_model %>% h2o.saveModel(path = \"04_Modeling/h20_models/\",force=TRUE)\n\n[1] \"D:\\\\Dokumente\\\\8gb stick\\\\OneDrive - tuhh.de\\\\Semester_VIII\\\\BundM\\\\MaschineLearning\\\\ss23-bdml-ginger4711\\\\src\\\\Data\\\\04_Modeling\\\\h20_models\\\\deeplearning_grid_01_model_63\"\n\nh2o.getModel(deeplearning_grid_01@model_ids[[2]]) %>% h2o.saveModel(path = \"04_Modeling/h20_models/\",force=TRUE)\n\n[1] \"D:\\\\Dokumente\\\\8gb stick\\\\OneDrive - tuhh.de\\\\Semester_VIII\\\\BundM\\\\MaschineLearning\\\\ss23-bdml-ginger4711\\\\src\\\\Data\\\\04_Modeling\\\\h20_models\\\\deeplearning_grid_01_model_95\"\n\nh2o.getModel(deeplearning_grid_01@model_ids[[3]]) %>% h2o.saveModel(path = \"04_Modeling/h20_models/\",force=TRUE)\n\n[1] \"D:\\\\Dokumente\\\\8gb stick\\\\OneDrive - tuhh.de\\\\Semester_VIII\\\\BundM\\\\MaschineLearning\\\\ss23-bdml-ginger4711\\\\src\\\\Data\\\\04_Modeling\\\\h20_models\\\\deeplearning_grid_01_model_66\""
  },
  {
    "objectID": "src/Data/04_performance_measures.html#visualize-the-trade-of-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "href": "src/Data/04_performance_measures.html#visualize-the-trade-of-between-the-precision-and-the-recall-and-the-optimal-threshold",
    "title": "Performance Measures",
    "section": "3. Visualize the trade of between the precision and the recall and the optimal threshold",
    "text": "3. Visualize the trade of between the precision and the recall and the optimal threshold\n\nperformance_h2o <- h2o.performance(best_grid_model, newdata = as.h2o(test_tbl))\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# This is on the test set\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as.tibble() \n\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      )\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\ni Please use the `linewidth` argument instead.\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\ni Please use the `linewidth` argument instead.\n\nperformance_tbl %>%\n    filter(f1 == max(f1))\n\n# A tibble: 1 x 20\n  threshold    f1    f2 f0point5 accuracy precision recall specificity\n      <dbl> <dbl> <dbl>    <dbl>    <dbl>     <dbl>  <dbl>       <dbl>\n1     0.327 0.598 0.668    0.541    0.883     0.509  0.724       0.905\n# i 12 more variables: absolute_mcc <dbl>, min_per_class_accuracy <dbl>,\n#   mean_per_class_accuracy <dbl>, tns <dbl>, fns <dbl>, fps <dbl>, tps <dbl>,\n#   tnr <dbl>, fnr <dbl>, fpr <dbl>, tpr <dbl>, idx <int>\n\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\ni Please use `linewidth` instead."
  },
  {
    "objectID": "src/Data/04_performance_measures.html#roc-plot",
    "href": "src/Data/04_performance_measures.html#roc-plot",
    "title": "Performance Measures",
    "section": "4. ROC Plot",
    "text": "4. ROC Plot\n\n# ROC Plot\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"04_Modeling/h20_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,3] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )"
  },
  {
    "objectID": "src/Data/04_performance_measures.html#precision-vs-recall-plot",
    "href": "src/Data/04_performance_measures.html#precision-vs-recall-plot",
    "title": "Performance Measures",
    "section": "5. Precision vs Recall Plot",
    "text": "5. Precision vs Recall Plot\n\n# Precision vs Recall\n\nload_model_performance_metrics <- function(path, test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl <- fs::dir_info(path = \"04_Modeling/h20_models/\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %>%\n    unnest(cols = metrics)\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,3] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )"
  },
  {
    "objectID": "src/Data/04_performance_measures.html#gain-plot",
    "href": "src/Data/04_performance_measures.html#gain-plot",
    "title": "Performance Measures",
    "section": "6. Gain Plot",
    "text": "6. Gain Plot\n\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new"
  },
  {
    "objectID": "src/Data/04_performance_measures.html#lift-plot",
    "href": "src/Data/04_performance_measures.html#lift-plot",
    "title": "Performance Measures",
    "section": "7. Lift Plot",
    "text": "7. Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new"
  },
  {
    "objectID": "src/Data/04_performance_measures.html#dashboard-with-cowplot",
    "href": "src/Data/04_performance_measures.html#dashboard-with-cowplot",
    "title": "Performance Measures",
    "section": "8. Dashboard with cowplot",
    "text": "8. Dashboard with cowplot\n\nlibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\nlibrary(glue)\n\n# set values to test the function while building it\nh2o_leaderboard <- automl_models_h2o@leaderboard\nnewdata <- test_tbl\norder_by <- \"auc\"\nmax_models <- 4\nsize <- 1\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %>%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)"
  },
  {
    "objectID": "src/Data/05_black_box_models_lime.html",
    "href": "src/Data/05_black_box_models_lime.html",
    "title": "Explaining Black-Box Models With LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \n\nlibrary(h2o)\n\n\n----------------------------------------------------------------------\n\nYour next step is to start H2O:\n    > h2o.init()\n\nFor H2O package documentation, ask for help:\n    > ??h2o\n\nAfter starting H2O, you can use the Web UI at http://localhost:54321\nFor more information visit https://docs.h2o.ai\n\n----------------------------------------------------------------------\n\n\n\nAttaching package: 'h2o'\n\n\nThe following objects are masked from 'package:stats':\n\n    cor, sd, var\n\n\nThe following objects are masked from 'package:base':\n\n    %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n    colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n    log10, log1p, log2, round, signif, trunc\n\nlibrary(recipes)\n\nLoading required package: dplyr\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\n\nAttaching package: 'recipes'\n\n\nThe following object is masked from 'package:stats':\n\n    step\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv forcats   1.0.0     v readr     2.1.4\nv ggplot2   3.4.2     v stringr   1.5.0\nv lubridate 1.9.2     v tibble    3.2.1\nv purrr     1.0.1     v tidyr     1.3.0\n\n\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx lubridate::day()   masks h2o::day()\nx dplyr::filter()    masks stats::filter()\nx stringr::fixed()   masks recipes::fixed()\nx lubridate::hour()  masks h2o::hour()\nx dplyr::lag()       masks stats::lag()\nx lubridate::month() masks h2o::month()\nx lubridate::week()  masks h2o::week()\nx lubridate::year()  masks h2o::year()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\nLoading required package: PerformanceAnalytics\nLoading required package: xts\nLoading required package: zoo\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: 'xts'\n\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n\n\nAttaching package: 'PerformanceAnalytics'\n\nThe following object is masked from 'package:graphics':\n\n    legend\n\nLoading required package: quantmod\nLoading required package: TTR\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\nlibrary(lime)\n\n\nAttaching package: 'lime'\n\nThe following object is masked from 'package:dplyr':\n\n    explain\n\nlibrary(rsample)\n\n# Load Data\nemployee_attrition_tbl <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\nRows: 1470 Columns: 35\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\ndbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    <- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\nNew names:\n* `` -> `...1`\n* `` -> `...2`\n\nprocess_hr_data_readable <- function(data, definitions_tbl) {\n  \n  definitions_list <- definitions_tbl %>%\n    fill(...1, .direction = \"down\") %>%\n    filter(!is.na(...2)) %>%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %>%\n    rename(column_name = ...1) %>%\n    mutate(key = as.numeric(key)) %>%\n    mutate(value = value %>% str_replace(pattern = \"'\", replacement = \"\")) %>%\n    split(.$column_name) %>%\n    map(~ select(., -column_name)) %>%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name <- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl <- list(HR_Data = data) %>%\n    append(definitions_list, after = 1) %>%\n    reduce(left_join) %>%\n    select(-one_of(names(definitions_list))) %>%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %>%\n    select(sort(names(.))) %>%\n    mutate_if(is.character, as.factor) %>%\n    mutate(\n      BusinessTravel = BusinessTravel %>% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %>% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\nJoining with `by = join_by(Education)`\nJoining with `by = join_by(EnvironmentSatisfaction)`\nJoining with `by = join_by(JobInvolvement)`\nJoining with `by = join_by(JobSatisfaction)`\nJoining with `by = join_by(PerformanceRating)`\nJoining with `by = join_by(RelationshipSatisfaction)`\nJoining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl  <- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n                step_zv(all_predictors()) %>%\n                step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n                prep()\n\nrecipe_obj\n\n\n-- Recipe ----------------------------------------------------------------------\n\n-- Inputs \nNumber of variables by role\noutcome:    1\npredictor: 34\n\n-- Training information \nTraining data contained 1249 data points and no incomplete rows.\n\n-- Operations \n* Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n* Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 2. Models ----\n\nh2o.init()\n\n Connection successful!\n\nR is connected to the H2O cluster: \n    H2O cluster uptime:         7 hours 15 minutes \n    H2O cluster timezone:       Europe/Berlin \n    H2O data parsing timezone:  UTC \n    H2O cluster version:        3.40.0.1 \n    H2O cluster version age:    3 months and 12 days \n    H2O cluster name:           H2O_started_from_R_Chris_yuh446 \n    H2O cluster total nodes:    1 \n    H2O cluster total memory:   2.16 GB \n    H2O cluster total cores:    12 \n    H2O cluster allowed cores:  12 \n    H2O cluster healthy:        TRUE \n    H2O Connection ip:          localhost \n    H2O Connection port:        54321 \n    H2O Connection proxy:       NA \n    H2O Internal Security:      FALSE \n    R Version:                  R version 4.0.5 (2021-03-31) \n\n\nWarning in h2o.clusterInfo(): \nYour H2O cluster version is (3 months and 12 days) old. There may be a newer version available.\nPlease download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\nautoml_leader <- h2o.loadModel(\"04_Modeling/h20_models/DRF_1_AutoML_28_20230520_183822\")\nautoml_leader\n\nModel Details:\n==============\n\nH2OBinomialModel: drf\nModel ID:  DRF_1_AutoML_28_20230520_183822 \nModel Summary: \n  number_of_trees number_of_internal_trees model_size_in_bytes min_depth\n1              46                       46               66692        11\n  max_depth mean_depth min_leaves max_leaves mean_leaves\n1        17   13.32609         88        129   110.36957\n\n\nH2OBinomialMetrics: drf\n** Reported on training data. **\n** Metrics reported on Out-Of-Bag training samples **\n\nMSE:  0.1091607\nRMSE:  0.3303948\nLogLoss:  0.6215371\nMean Per-Class Error:  0.2860322\nAUC:  0.7497888\nAUCPR:  0.3857798\nGini:  0.4995777\nR^2:  0.1228901\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n        No Yes    Error       Rate\nNo     735 174 0.191419   =174/909\nYes     59  96 0.380645    =59/155\nTotals 794 270 0.218985  =233/1064\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold      value idx\n1                       max f1  0.227273   0.451765  65\n2                       max f2  0.187500   0.541922  74\n3                 max f0point5  0.320000   0.444596  46\n4                 max accuracy  0.538462   0.859962  16\n5                max precision  0.800000   1.000000   0\n6                   max recall  0.000000   1.000000 116\n7              max specificity  0.800000   1.000000   0\n8             max absolute_mcc  0.300000   0.347232  51\n9   max min_per_class_accuracy  0.181818   0.690323  76\n10 max mean_per_class_accuracy  0.227273   0.713968  65\n11                     max tns  0.800000 909.000000   0\n12                     max fns  0.800000 154.000000   0\n13                     max fps  0.000000 909.000000 116\n14                     max tps  0.000000 155.000000 116\n15                     max tnr  0.800000   1.000000   0\n16                     max fnr  0.800000   0.993548   0\n17                     max fpr  0.000000   1.000000 116\n18                     max tpr  0.000000   1.000000 116\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\nH2OBinomialMetrics: drf\n** Reported on validation data. **\n\nMSE:  0.1271733\nRMSE:  0.3566136\nLogLoss:  0.4095014\nMean Per-Class Error:  0.2429288\nAUC:  0.7916219\nAUCPR:  0.5760425\nGini:  0.5832438\nR^2:  0.220819\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n        No Yes    Error     Rate\nNo     122  25 0.170068  =25/147\nYes     12  26 0.315789   =12/38\nTotals 134  51 0.200000  =37/185\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold      value idx\n1                       max f1  0.260870   0.584270  18\n2                       max f2  0.173913   0.657895  22\n3                 max f0point5  0.347826   0.601266  14\n4                 max accuracy  0.347826   0.837838  14\n5                max precision  0.782609   1.000000   0\n6                   max recall  0.043478   1.000000  28\n7              max specificity  0.782609   1.000000   0\n8             max absolute_mcc  0.347826   0.466001  14\n9   max min_per_class_accuracy  0.195652   0.734694  21\n10 max mean_per_class_accuracy  0.260870   0.757071  18\n11                     max tns  0.782609 147.000000   0\n12                     max fns  0.782609  37.000000   0\n13                     max fps  0.000000 147.000000  30\n14                     max tps  0.043478  38.000000  28\n15                     max tnr  0.782609   1.000000   0\n16                     max fnr  0.782609   0.973684   0\n17                     max fpr  0.000000   1.000000  30\n18                     max tpr  0.043478   1.000000  28\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\nH2OBinomialMetrics: drf\n** Reported on cross-validation data. **\n** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n\nMSE:  0.1072195\nRMSE:  0.3274439\nLogLoss:  0.450539\nMean Per-Class Error:  0.3141701\nAUC:  0.7388303\nAUCPR:  0.4193506\nGini:  0.4776607\nR^2:  0.1384876\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n        No Yes    Error       Rate\nNo     807 102 0.112211   =102/909\nYes     80  75 0.516129    =80/155\nTotals 887 177 0.171053  =182/1064\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold      value idx\n1                       max f1  0.266667   0.451807  30\n2                       max f2  0.160000   0.528338  40\n3                 max f0point5  0.433333   0.478873  17\n4                 max accuracy  0.433333   0.871241  17\n5                max precision  0.760000   1.000000   0\n6                   max recall  0.000000   1.000000  52\n7              max specificity  0.760000   1.000000   0\n8             max absolute_mcc  0.266667   0.352083  30\n9   max min_per_class_accuracy  0.160000   0.657866  40\n10 max mean_per_class_accuracy  0.240000   0.689159  33\n11                     max tns  0.760000 909.000000   0\n12                     max fns  0.760000 154.000000   0\n13                     max fps  0.000000 909.000000  52\n14                     max tps  0.000000 155.000000  52\n15                     max tnr  0.760000   1.000000   0\n16                     max fnr  0.760000   0.993548   0\n17                     max fpr  0.000000   1.000000  52\n18                     max tpr  0.000000   1.000000  52\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\nCross-Validation Metrics Summary: \n                             mean       sd cv_1_valid cv_2_valid cv_3_valid\naccuracy                 0.843046 0.021398   0.816901   0.863850   0.826291\nauc                      0.738616 0.047452   0.739412   0.777769   0.752875\nerr                      0.156954 0.021398   0.183099   0.136150   0.173709\nerr_count               33.400000 4.560702  39.000000  29.000000  37.000000\nf0point5                 0.471185 0.059526   0.396825   0.559701   0.467033\nf1                       0.464520 0.041745   0.434783   0.508475   0.478873\nf2                       0.467599 0.071645   0.480769   0.465839   0.491329\nlift_top_group           4.651961 1.529051   4.896552   4.698529   4.176471\nlogloss                  0.450165 0.137775   0.353070   0.365467   0.376165\nmax_per_class_error      0.525282 0.100763   0.482759   0.558824   0.500000\nmcc                      0.382730 0.042299   0.334891   0.438458   0.375354\nmean_per_class_accuracy  0.690725 0.034587   0.690686   0.692655   0.694134\nmean_per_class_error     0.309275 0.034587   0.309314   0.307345   0.305866\nmse                      0.106708 0.006655   0.104813   0.109384   0.112639\npr_auc                   0.426490 0.059228   0.361906   0.486945   0.470138\nprecision                0.482214 0.093549   0.375000   0.600000   0.459459\nr2                       0.139951 0.032814   0.108833   0.184581   0.160314\nrecall                   0.474718 0.100763   0.517241   0.441176   0.500000\nrmse                     0.326531 0.010325   0.323749   0.330732   0.335618\nspecificity              0.906732 0.040756   0.864130   0.944134   0.888268\n                        cv_4_valid cv_5_valid\naccuracy                  0.863850   0.844340\nauc                       0.657657   0.765365\nerr                       0.136150   0.155660\nerr_count                29.000000  33.000000\nf0point5                  0.485437   0.446927\nf1                        0.408163   0.492308\nf2                        0.352113   0.547945\nlift_top_group            6.870968   2.617284\nlogloss                   0.680863   0.475258\nmax_per_class_error       0.677419   0.407407\nmcc                       0.353250   0.411700\nmean_per_class_accuracy   0.639312   0.736837\nmean_per_class_error      0.360688   0.263163\nmse                       0.110725   0.095979\npr_auc                    0.448680   0.364780\nprecision                 0.555556   0.421053\nr2                        0.109628   0.136398\nrecall                    0.322581   0.592593\nrmse                      0.332753   0.309805\nspecificity               0.956044   0.881081\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\npredictions_tbl <- automl_leader %>% \n    h2o.predict(newdata = as.h2o(test_tbl)) %>%\n    as.tibble() %>%\n    bind_cols(\n        test_tbl %>%\n            select(Attrition, EmployeeNumber)\n    )\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\ni Please use `as_tibble()` instead.\ni The signature and semantics have changed, see `?as_tibble`.\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl\n\n# A tibble: 221 x 5\n   predict    No    Yes Attrition EmployeeNumber\n   <fct>   <dbl>  <dbl> <fct>              <dbl>\n 1 Yes     0.478 0.522  No                    10\n 2 No      0.891 0.109  No                    16\n 3 No      0.804 0.196  No                    30\n 4 No      0.913 0.0870 Yes                   31\n 5 No      0.957 0.0435 No                    40\n 6 Yes     0.717 0.283  Yes                   42\n 7 No      0.957 0.0435 No                    46\n 8 Yes     0.609 0.391  Yes                   55\n 9 Yes     0.630 0.370  Yes                   64\n10 No      1     0      No                    77\n# i 211 more rows\n\n# 3.2 Single Explanation ----\n\nexplainer <- train_tbl %>%\n    select(-Attrition) %>%\n    lime(\n        model           = automl_leader,\n        bin_continuous  = TRUE,\n        n_bins          = 4,\n        quantile_bins   = TRUE\n    )\n\nexplainer\n\n$model\nModel Details:\n==============\n\nH2OBinomialModel: drf\nModel ID:  DRF_1_AutoML_28_20230520_183822 \nModel Summary: \n  number_of_trees number_of_internal_trees model_size_in_bytes min_depth\n1              46                       46               66692        11\n  max_depth mean_depth min_leaves max_leaves mean_leaves\n1        17   13.32609         88        129   110.36957\n\n\nH2OBinomialMetrics: drf\n** Reported on training data. **\n** Metrics reported on Out-Of-Bag training samples **\n\nMSE:  0.1091607\nRMSE:  0.3303948\nLogLoss:  0.6215371\nMean Per-Class Error:  0.2860322\nAUC:  0.7497888\nAUCPR:  0.3857798\nGini:  0.4995777\nR^2:  0.1228901\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n        No Yes    Error       Rate\nNo     735 174 0.191419   =174/909\nYes     59  96 0.380645    =59/155\nTotals 794 270 0.218985  =233/1064\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold      value idx\n1                       max f1  0.227273   0.451765  65\n2                       max f2  0.187500   0.541922  74\n3                 max f0point5  0.320000   0.444596  46\n4                 max accuracy  0.538462   0.859962  16\n5                max precision  0.800000   1.000000   0\n6                   max recall  0.000000   1.000000 116\n7              max specificity  0.800000   1.000000   0\n8             max absolute_mcc  0.300000   0.347232  51\n9   max min_per_class_accuracy  0.181818   0.690323  76\n10 max mean_per_class_accuracy  0.227273   0.713968  65\n11                     max tns  0.800000 909.000000   0\n12                     max fns  0.800000 154.000000   0\n13                     max fps  0.000000 909.000000 116\n14                     max tps  0.000000 155.000000 116\n15                     max tnr  0.800000   1.000000   0\n16                     max fnr  0.800000   0.993548   0\n17                     max fpr  0.000000   1.000000 116\n18                     max tpr  0.000000   1.000000 116\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\nH2OBinomialMetrics: drf\n** Reported on validation data. **\n\nMSE:  0.1271733\nRMSE:  0.3566136\nLogLoss:  0.4095014\nMean Per-Class Error:  0.2429288\nAUC:  0.7916219\nAUCPR:  0.5760425\nGini:  0.5832438\nR^2:  0.220819\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n        No Yes    Error     Rate\nNo     122  25 0.170068  =25/147\nYes     12  26 0.315789   =12/38\nTotals 134  51 0.200000  =37/185\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold      value idx\n1                       max f1  0.260870   0.584270  18\n2                       max f2  0.173913   0.657895  22\n3                 max f0point5  0.347826   0.601266  14\n4                 max accuracy  0.347826   0.837838  14\n5                max precision  0.782609   1.000000   0\n6                   max recall  0.043478   1.000000  28\n7              max specificity  0.782609   1.000000   0\n8             max absolute_mcc  0.347826   0.466001  14\n9   max min_per_class_accuracy  0.195652   0.734694  21\n10 max mean_per_class_accuracy  0.260870   0.757071  18\n11                     max tns  0.782609 147.000000   0\n12                     max fns  0.782609  37.000000   0\n13                     max fps  0.000000 147.000000  30\n14                     max tps  0.043478  38.000000  28\n15                     max tnr  0.782609   1.000000   0\n16                     max fnr  0.782609   0.973684   0\n17                     max fpr  0.000000   1.000000  30\n18                     max tpr  0.043478   1.000000  28\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\nH2OBinomialMetrics: drf\n** Reported on cross-validation data. **\n** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n\nMSE:  0.1072195\nRMSE:  0.3274439\nLogLoss:  0.450539\nMean Per-Class Error:  0.3141701\nAUC:  0.7388303\nAUCPR:  0.4193506\nGini:  0.4776607\nR^2:  0.1384876\n\nConfusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n        No Yes    Error       Rate\nNo     807 102 0.112211   =102/909\nYes     80  75 0.516129    =80/155\nTotals 887 177 0.171053  =182/1064\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n                        metric threshold      value idx\n1                       max f1  0.266667   0.451807  30\n2                       max f2  0.160000   0.528338  40\n3                 max f0point5  0.433333   0.478873  17\n4                 max accuracy  0.433333   0.871241  17\n5                max precision  0.760000   1.000000   0\n6                   max recall  0.000000   1.000000  52\n7              max specificity  0.760000   1.000000   0\n8             max absolute_mcc  0.266667   0.352083  30\n9   max min_per_class_accuracy  0.160000   0.657866  40\n10 max mean_per_class_accuracy  0.240000   0.689159  33\n11                     max tns  0.760000 909.000000   0\n12                     max fns  0.760000 154.000000   0\n13                     max fps  0.000000 909.000000  52\n14                     max tps  0.000000 155.000000  52\n15                     max tnr  0.760000   1.000000   0\n16                     max fnr  0.760000   0.993548   0\n17                     max fpr  0.000000   1.000000  52\n18                     max tpr  0.000000   1.000000  52\n\nGains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\nCross-Validation Metrics Summary: \n                             mean       sd cv_1_valid cv_2_valid cv_3_valid\naccuracy                 0.843046 0.021398   0.816901   0.863850   0.826291\nauc                      0.738616 0.047452   0.739412   0.777769   0.752875\nerr                      0.156954 0.021398   0.183099   0.136150   0.173709\nerr_count               33.400000 4.560702  39.000000  29.000000  37.000000\nf0point5                 0.471185 0.059526   0.396825   0.559701   0.467033\nf1                       0.464520 0.041745   0.434783   0.508475   0.478873\nf2                       0.467599 0.071645   0.480769   0.465839   0.491329\nlift_top_group           4.651961 1.529051   4.896552   4.698529   4.176471\nlogloss                  0.450165 0.137775   0.353070   0.365467   0.376165\nmax_per_class_error      0.525282 0.100763   0.482759   0.558824   0.500000\nmcc                      0.382730 0.042299   0.334891   0.438458   0.375354\nmean_per_class_accuracy  0.690725 0.034587   0.690686   0.692655   0.694134\nmean_per_class_error     0.309275 0.034587   0.309314   0.307345   0.305866\nmse                      0.106708 0.006655   0.104813   0.109384   0.112639\npr_auc                   0.426490 0.059228   0.361906   0.486945   0.470138\nprecision                0.482214 0.093549   0.375000   0.600000   0.459459\nr2                       0.139951 0.032814   0.108833   0.184581   0.160314\nrecall                   0.474718 0.100763   0.517241   0.441176   0.500000\nrmse                     0.326531 0.010325   0.323749   0.330732   0.335618\nspecificity              0.906732 0.040756   0.864130   0.944134   0.888268\n                        cv_4_valid cv_5_valid\naccuracy                  0.863850   0.844340\nauc                       0.657657   0.765365\nerr                       0.136150   0.155660\nerr_count                29.000000  33.000000\nf0point5                  0.485437   0.446927\nf1                        0.408163   0.492308\nf2                        0.352113   0.547945\nlift_top_group            6.870968   2.617284\nlogloss                   0.680863   0.475258\nmax_per_class_error       0.677419   0.407407\nmcc                       0.353250   0.411700\nmean_per_class_accuracy   0.639312   0.736837\nmean_per_class_error      0.360688   0.263163\nmse                       0.110725   0.095979\npr_auc                    0.448680   0.364780\nprecision                 0.555556   0.421053\nr2                        0.109628   0.136398\nrecall                    0.322581   0.592593\nrmse                      0.332753   0.309805\nspecificity               0.956044   0.881081\n\n$preprocess\nfunction (x) \nx\n<bytecode: 0x0000000029a14d08>\n<environment: 0x0000000029a0b348>\n\n$bin_continuous\n[1] TRUE\n\n$n_bins\n[1] 4\n\n$quantile_bins\n[1] TRUE\n\n$use_density\n[1] TRUE\n\n$feature_type\n                     Age           BusinessTravel                DailyRate \n               \"numeric\"                 \"factor\"                \"numeric\" \n              Department         DistanceFromHome                Education \n                \"factor\"                \"numeric\"                 \"factor\" \n          EducationField           EmployeeNumber  EnvironmentSatisfaction \n                \"factor\"                \"numeric\"                 \"factor\" \n                  Gender               HourlyRate           JobInvolvement \n                \"factor\"                \"numeric\"                 \"factor\" \n                JobLevel                  JobRole          JobSatisfaction \n                \"factor\"                 \"factor\"                 \"factor\" \n           MaritalStatus            MonthlyIncome              MonthlyRate \n                \"factor\"                \"numeric\"                \"numeric\" \n      NumCompaniesWorked                 OverTime        PercentSalaryHike \n               \"numeric\"                 \"factor\"                \"numeric\" \n       PerformanceRating RelationshipSatisfaction         StockOptionLevel \n                \"factor\"                 \"factor\"                 \"factor\" \n       TotalWorkingYears    TrainingTimesLastYear          WorkLifeBalance \n               \"numeric\"                \"numeric\"                 \"factor\" \n          YearsAtCompany       YearsInCurrentRole  YearsSinceLastPromotion \n               \"numeric\"                \"numeric\"                \"numeric\" \n    YearsWithCurrManager \n               \"numeric\" \n\n$bin_cuts\n$bin_cuts$Age\n  0%  25%  50%  75% 100% \n  18   30   36   43   60 \n\n$bin_cuts$BusinessTravel\nNULL\n\n$bin_cuts$DailyRate\n  0%  25%  50%  75% 100% \n 102  465  797 1147 1499 \n\n$bin_cuts$Department\nNULL\n\n$bin_cuts$DistanceFromHome\n  0%  25%  50%  75% 100% \n   1    2    7   14   29 \n\n$bin_cuts$Education\nNULL\n\n$bin_cuts$EducationField\nNULL\n\n$bin_cuts$EmployeeNumber\n  0%  25%  50%  75% 100% \n   1  511 1040 1573 2065 \n\n$bin_cuts$EnvironmentSatisfaction\nNULL\n\n$bin_cuts$Gender\nNULL\n\n$bin_cuts$HourlyRate\n  0%  25%  50%  75% 100% \n  30   49   66   83  100 \n\n$bin_cuts$JobInvolvement\nNULL\n\n$bin_cuts$JobLevel\nNULL\n\n$bin_cuts$JobRole\nNULL\n\n$bin_cuts$JobSatisfaction\nNULL\n\n$bin_cuts$MaritalStatus\nNULL\n\n$bin_cuts$MonthlyIncome\n   0%   25%   50%   75%  100% \n 1051  2929  4908  8474 19999 \n\n$bin_cuts$MonthlyRate\n   0%   25%   50%   75%  100% \n 2094  8423 14470 20689 26968 \n\n$bin_cuts$NumCompaniesWorked\n  0%  25%  50%  75% 100% \n   0    1    2    4    9 \n\n$bin_cuts$OverTime\nNULL\n\n$bin_cuts$PercentSalaryHike\n  0%  25%  50%  75% 100% \n  11   12   14   18   25 \n\n$bin_cuts$PerformanceRating\nNULL\n\n$bin_cuts$RelationshipSatisfaction\nNULL\n\n$bin_cuts$StockOptionLevel\nNULL\n\n$bin_cuts$TotalWorkingYears\n  0%  25%  50%  75% 100% \n   0    6   10   15   38 \n\n$bin_cuts$TrainingTimesLastYear\n  0%  25%  50% 100% \n   0    2    3    6 \n\n$bin_cuts$WorkLifeBalance\nNULL\n\n$bin_cuts$YearsAtCompany\n  0%  25%  50%  75% 100% \n   0    3    5    9   37 \n\n$bin_cuts$YearsInCurrentRole\n  0%  25%  50%  75% 100% \n   0    2    3    7   18 \n\n$bin_cuts$YearsSinceLastPromotion\n  0%  50%  75% 100% \n   0    1    2   15 \n\n$bin_cuts$YearsWithCurrManager\n  0%  25%  50%  75% 100% \n   0    2    3    7   17 \n\n\n$feature_distribution\n$feature_distribution$Age\n\n        1         2         3         4 \n0.2602082 0.2834267 0.2217774 0.2345877 \n\n$feature_distribution$BusinessTravel\n\n       Non-Travel     Travel_Rarely Travel_Frequently \n        0.1000801         0.7181745         0.1817454 \n\n$feature_distribution$DailyRate\n\n        1         2         3         4 \n0.2514011 0.2489992 0.2497998 0.2497998 \n\n$feature_distribution$Department\n\n       Human Resources Research & Development                  Sales \n            0.04323459             0.65092074             0.30584468 \n\n$feature_distribution$DistanceFromHome\n\n        1         2         3         4 \n0.2954363 0.2369896 0.2241793 0.2433947 \n\n$feature_distribution$Education\n\nBelow College       College      Bachelor        Master        Doctor \n   0.11689351    0.18895116    0.38510809    0.27461970    0.03442754 \n\n$feature_distribution$EducationField\n\n Human Resources    Life Sciences        Marketing          Medical \n      0.01761409       0.41793435       0.10888711       0.31144916 \n           Other Technical Degree \n      0.05444355       0.08967174 \n\n$feature_distribution$EmployeeNumber\n\n        1         2         3         4 \n0.2506005 0.2497998 0.2497998 0.2497998 \n\n$feature_distribution$EnvironmentSatisfaction\n\n      Low    Medium      High Very High \n0.1913531 0.1961569 0.3018415 0.3106485 \n\n$feature_distribution$Gender\n\n   Female      Male \n0.4123299 0.5876701 \n\n$feature_distribution$HourlyRate\n\n        1         2         3         4 \n0.2618094 0.2473979 0.2449960 0.2457966 \n\n$feature_distribution$JobInvolvement\n\n       Low     Medium       High  Very High \n0.05684548 0.25780624 0.58927142 0.09607686 \n\n$feature_distribution$JobLevel\n\n         1          2          3          4          5 \n0.36829464 0.36509207 0.14651721 0.07526021 0.04483587 \n\n$feature_distribution$JobRole\n\nHealthcare Representative           Human Resources     Laboratory Technician \n               0.08646918                0.03682946                0.18174540 \n                  Manager    Manufacturing Director         Research Director \n               0.06885508                0.09927942                0.05924740 \n       Research Scientist           Sales Executive      Sales Representative \n               0.18654924                0.22337870                0.05764612 \n\n$feature_distribution$JobSatisfaction\n\n      Low    Medium      High Very High \n0.1873499 0.1985588 0.3018415 0.3122498 \n\n$feature_distribution$MaritalStatus\n\n   Single   Married  Divorced \n0.3306645 0.4571657 0.2121697 \n\n$feature_distribution$MonthlyIncome\n\n        1         2         3         4 \n0.2506005 0.2497998 0.2497998 0.2497998 \n\n$feature_distribution$MonthlyRate\n\n        1         2         3         4 \n0.2506005 0.2497998 0.2497998 0.2497998 \n\n$feature_distribution$NumCompaniesWorked\n\n         1          2          3          4 \n0.48118495 0.09927942 0.20496397 0.21457166 \n\n$feature_distribution$OverTime\n\n       No       Yes \n0.7165733 0.2834267 \n\n$feature_distribution$PercentSalaryHike\n\n        1         2         3         4 \n0.2866293 0.2738191 0.2289832 0.2105685 \n\n$feature_distribution$PerformanceRating\n\n        Low        Good   Excellent Outstanding \n  0.0000000   0.0000000   0.8414732   0.1585268 \n\n$feature_distribution$RelationshipSatisfaction\n\n      Low    Medium      High Very High \n0.1889512 0.2161729 0.3018415 0.2930344 \n\n$feature_distribution$StockOptionLevel\n\n         0          1          2          3 \n0.43554844 0.40592474 0.10168135 0.05684548 \n\n$feature_distribution$TotalWorkingYears\n\n        1         2         3         4 \n0.3050440 0.3306645 0.1224980 0.2417934 \n\n$feature_distribution$TrainingTimesLastYear\n\n        1         2         3 \n0.4603683 0.3306645 0.2089672 \n\n$feature_distribution$WorkLifeBalance\n\n       Bad       Good     Better       Best \n0.05204163 0.22497998 0.61889512 0.10408327 \n\n$feature_distribution$YearsAtCompany\n\n        1         2         3         4 \n0.3226581 0.2137710 0.2217774 0.2417934 \n\n$feature_distribution$YearsInCurrentRole\n\n         1          2          3          4 \n0.46757406 0.08726982 0.27542034 0.16973579 \n\n$feature_distribution$YearsSinceLastPromotion\n\n        1         2         3 \n0.6413131 0.1120897 0.2465973 \n\n$feature_distribution$YearsWithCurrManager\n\n         1          2          3          4 \n0.46357086 0.09767814 0.25300240 0.18574860 \n\n\nattr(,\"class\")\n[1] \"data_frame_explainer\" \"explainer\"            \"list\"                \n\nexplanation <- test_tbl %>%\n    slice(1) %>%\n    select(-Attrition) %>%\n    lime::explain(\n    \n        # Pass our explainer object\n        explainer = explainer,\n        # Because it is a binary classification model: 1\n        n_labels   = 1,\n        # number of features to be returned\n        n_features = 8,\n        # number of localized linear models\n        n_permutations = 5000,\n        # Let's start with 1\n        kernel_width   = 1\n    )\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation\n\n# A tibble: 8 x 13\n  model_type    case  label label_prob model_r2 model_intercept model_prediction\n  <chr>         <chr> <chr>      <dbl>    <dbl>           <dbl>            <dbl>\n1 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n2 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n3 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n4 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n5 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n6 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n7 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n8 classificati~ 1     Yes        0.522    0.333           0.132            0.408\n# i 6 more variables: feature <chr>, feature_value <dbl>, feature_weight <dbl>,\n#   feature_desc <chr>, data <list>, prediction <list>\n\nexplanation %>%\n    as.tibble() %>%\n    select(feature:prediction) \n\n# A tibble: 8 x 6\n  feature    feature_value feature_weight feature_desc data         prediction  \n  <chr>              <dbl>          <dbl> <chr>        <list>       <list>      \n1 OverTime               2         0.110  OverTime = ~ <named list> <named list>\n2 MonthlyIn~          2670         0.0460 MonthlyInco~ <named list> <named list>\n3 JobSatisf~             1         0.0385 JobSatisfac~ <named list> <named list>\n4 JobRole                3         0.0284 JobRole = L~ <named list> <named list>\n5 YearsAtCo~             1         0.0265 YearsAtComp~ <named list> <named list>\n6 StockOpti~             4         0.0245 StockOption~ <named list> <named list>\n7 JobLevel               1         0.0237 JobLevel = 1 <named list> <named list>\n8 BusinessT~             2        -0.0210 BusinessTra~ <named list> <named list>\n\ng <- plot_features(explanation = explanation, ncol = 1)\n\n# 3.3 Multiple Explanations ----\n\nexplanation <- test_tbl %>%\n    slice(1:20) %>%\n    select(-Attrition) %>%\n    lime::explain(\n        explainer = explainer,\n        n_labels   = 1,\n        n_features = 8,\n        n_permutations = 5000,\n        kernel_width   = 0.5\n    )\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %>%\n    as.tibble()\n\n# A tibble: 160 x 13\n   model_type   case  label label_prob model_r2 model_intercept model_prediction\n   <chr>        <chr> <chr>      <dbl>    <dbl>           <dbl>            <dbl>\n 1 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 2 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 3 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 4 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 5 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 6 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 7 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 8 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 9 classificat~ 2     No         0.891    0.329           0.747            0.782\n10 classificat~ 2     No         0.891    0.329           0.747            0.782\n# i 150 more rows\n# i 6 more variables: feature <chr>, feature_value <dbl>, feature_weight <dbl>,\n#   feature_desc <chr>, data <list>, prediction <list>\n\nplot_features(explanation, ncol = 4)\n\n\n\n\n\n\n\nplot_explanations(explanation)"
  },
  {
    "objectID": "src/Data/05_black_box_models_lime.html#part-1",
    "href": "src/Data/05_black_box_models_lime.html#part-1",
    "title": "Explaining Black-Box Models With LIME",
    "section": "Part 1",
    "text": "Part 1\n\nlibrary(ggplot2)\n\nexplanation %>% as.tibble()\n\nWarning: `as.tibble()` was deprecated in tibble 2.0.0.\ni Please use `as_tibble()` instead.\ni The signature and semantics have changed, see `?as_tibble`.\n\n\n# A tibble: 160 x 13\n   model_type   case  label label_prob model_r2 model_intercept model_prediction\n   <chr>        <chr> <chr>      <dbl>    <dbl>           <dbl>            <dbl>\n 1 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 2 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 3 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 4 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 5 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 6 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 7 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 8 classificat~ 1     Yes        0.522    0.321           0.134            0.392\n 9 classificat~ 2     No         0.891    0.329           0.747            0.782\n10 classificat~ 2     No         0.891    0.329           0.747            0.782\n# i 150 more rows\n# i 6 more variables: feature <chr>, feature_value <dbl>, feature_weight <dbl>,\n#   feature_desc <chr>, data <list>, prediction <list>\n\n# Reference\nexplanation %>% filter(case == 1) %>% plot_features()\n\n\n\n\n\n\n\n# My version\nexplanation %>%\n    filter(case == 1) %>%\n    ggplot(aes(x = fct_reorder(feature,abs(feature_weight)),y = feature_weight,fill = feature_weight < 0)) +\n    coord_flip() +\n    geom_col(just = 0.5) + \n    labs( title = paste0(\n      \"Case: \",\"1\",\"\\n\",\n      \"Label: \",filter(explanation,case == 1)[1,]$label,\"\\n\",\n      \"Probability: \",filter(explanation,case == 1)[1,]$label_prob%>%round(2),\"\\n\",\n      \"Explanation Fit: \",filter(explanation,case == 1)[1,]$model_r2%>%round(2),\"\\n\"\n      ),\n      x = \"Feature\",\n      y = \"Weight\",\n      fill = \"\"\n    ) +\n    scale_x_discrete(labels=explanation %>% filter(case == 1) %>% arrange(abs(feature_weight)) %>% .$feature_desc) +\n    theme(legend.position = \"bottom\",\n          panel.background = element_blank(),\n          panel.grid.major.x = element_line(color=\"#EBEBEB\"),\n          panel.grid.minor.x = element_line(color=\"#EBEBEB\")\n    ) +\n    scale_fill_manual(values=c(\"#4682B4\", \"#B22222\"),labels=c(\"Supports\",\"Contradics\"))"
  },
  {
    "objectID": "src/Data/05_black_box_models_lime.html#part-2",
    "href": "src/Data/05_black_box_models_lime.html#part-2",
    "title": "Explaining Black-Box Models With LIME",
    "section": "Part 2",
    "text": "Part 2\n\n# Reference\nplot_explanations(explanation)\n\n\n\n\n\n\n\n# My version\nexplanation %>%\n    ggplot(aes(x = case,y = fct_reorder(feature,abs(label_prob)),fill = feature_weight)) +\n    facet_wrap(~label) + \n    geom_tile() + \n    labs(\n      x = \"Case\",\n      y = \"Feature\"\n    ) +\n    scale_y_discrete(labels=explanation%>% arrange(abs(label_prob)) %>% .$feature_desc) +\n    theme(panel.background = element_blank(),\n          panel.grid = element_blank(),\n          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)\n    ) +\n  scale_fill_gradient2('Feature \\n weight', low = '#B9362F', mid = \"white\", high = '#4B85B6')"
  },
  {
    "objectID": "src/Data/06_deep_learning.html",
    "href": "src/Data/06_deep_learning.html",
    "title": "Deep Learning",
    "section": "",
    "text": "library(keras)\n\nfashion_mnist <- dataset_fashion_mnist()\n\nc(train_images, train_labels) %<-% fashion_mnist$train\nc(test_images, test_labels) %<-% fashion_mnist$test\n\nclass_names = c(\"T-shirt/top\",\n                \"Trouser\",\n                \"Pullover\",\n                \"Dress\",\n                \"Coat\", \n                \"Sandal\",\n                \"Shirt\",\n                \"Sneaker\",\n                \"Bag\",\n                \"Ankle boot\")\n\n\n\n\ndim(train_images)\n\n[1] 60000    28    28\n\n## [1] 60000    28    28\ndim(test_images)\n\n[1] 10000    28    28\n\n## [1] 10000    28    28\ndim(train_labels)\n\n[1] 60000\n\n## [1] 60000\ndim(test_labels)\n\n[1] 10000\n\n## [1] 10000\n\ntrain_labels %>% \n          unique() %>% \n          sort()\n\n [1] 0 1 2 3 4 5 6 7 8 9\n\n## [1] 0 1 2 3 4 5 6 7 8 9\n\ntrain_labels[1]\n\n[1] 9\n\n## [1] 9\n\nclass_names[9 + 1]\n\n[1] \"Ankle boot\"\n\n## [1] \"Ankle boot\"\n\n\n\n\n\nlibrary(tidyverse)\n\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.1     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(rlang)\n\n\nAttaching package: 'rlang'\n\nThe following objects are masked from 'package:purrr':\n\n    %@%, flatten, flatten_chr, flatten_dbl, flatten_int, flatten_lgl,\n    flatten_raw, invoke, splice\n\nimage_1 <- train_images[1, , ] %>% \n\n                # Convert matrix to a tibble (with unique col names)\n                as_tibble(.name_repair = \"unique\") %>% \n                \n                # Set the names according to the col number\n                set_names( seq_len(ncol(.)) ) %>% \n                \n                # Create a column for the rownumbers\n                mutate(y = seq_len(nrow(.))) %>% \n                \n                # Make the data long, so that we have x/y value pairs\n                pivot_longer(cols = c(1:28), names_to        = \"x\", \n                                             values_to       = \"value\", \n                                             names_transform = list(x = as.integer))\n\nNew names:\n* `` -> `...1`\n* `` -> `...2`\n* `` -> `...3`\n* `` -> `...4`\n* `` -> `...5`\n* `` -> `...6`\n* `` -> `...7`\n* `` -> `...8`\n* `` -> `...9`\n* `` -> `...10`\n* `` -> `...11`\n* `` -> `...12`\n* `` -> `...13`\n* `` -> `...14`\n* `` -> `...15`\n* `` -> `...16`\n* `` -> `...17`\n* `` -> `...18`\n* `` -> `...19`\n* `` -> `...20`\n* `` -> `...21`\n* `` -> `...22`\n* `` -> `...23`\n* `` -> `...24`\n* `` -> `...25`\n* `` -> `...26`\n* `` -> `...27`\n* `` -> `...28`\n\nimage_1 %>% ggplot(aes(x = x, y = y, fill = value)) +\n\n            # Add tiles and fill them with a white/black gradient\n            geom_tile() +\n            scale_fill_gradient(low = \"white\", high = \"black\", na.value = NA) +\n            \n            # Turn image upside down\n            scale_y_reverse() +\n            \n            # Formatting\n            theme_minimal() +\n            theme(panel.grid = element_blank()) +\n            xlab(\"\") +\n            ylab(\"\")\n\n\n\n\n\n\n\ntrain_images <- train_images / 255\ntest_images  <- test_images / 255\n\nplot_image <- function(idx) {\n  \n  image_idx <- train_images[idx, , ] %>% \n                as_tibble(.name_repair = \"unique\") %>% \n                set_names(seq_len(ncol(.))) %>% \n                mutate(y = seq_len(nrow(.))) %>% \n                pivot_longer(cols = c(1:28), names_to        = \"x\", \n                                             values_to       = \"value\", \n                                             names_transform = list(x = as.integer))\n\n    g     <- image_idx %>% \n              ggplot(aes(x = x, y = y, fill = value)) +\n              geom_tile() +\n              scale_fill_gradient(low = \"white\", high = \"black\", na.value = NA) +\n              scale_y_reverse() +\n              theme_minimal() +\n              theme(panel.grid = element_blank(),\n                    legend.position = \"none\",\n                    axis.text = element_blank()) + \n                    \n              # Add the label (add 1, because it is 0-indexed)      \n              xlab(class_names[train_labels[idx] + 1]) +\n              ylab(\"\")\n\n      return(g)\n\n}\n\nlibrary(cowplot)\n\n\nAttaching package: 'cowplot'\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\nimage_lst <- map(c(1:25), plot_image)\n\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\n* `` -> `...1`\n* `` -> `...2`\n* `` -> `...3`\n* `` -> `...4`\n* `` -> `...5`\n* `` -> `...6`\n* `` -> `...7`\n* `` -> `...8`\n* `` -> `...9`\n* `` -> `...10`\n* `` -> `...11`\n* `` -> `...12`\n* `` -> `...13`\n* `` -> `...14`\n* `` -> `...15`\n* `` -> `...16`\n* `` -> `...17`\n* `` -> `...18`\n* `` -> `...19`\n* `` -> `...20`\n* `` -> `...21`\n* `` -> `...22`\n* `` -> `...23`\n* `` -> `...24`\n* `` -> `...25`\n* `` -> `...26`\n* `` -> `...27`\n* `` -> `...28`\n\nplot_grid(plotlist = image_lst)\n\n\n\n\n\n\n\n\n\n\n\n\n# Setup the layers\nmodel <- keras_model_sequential()\nmodel %>%\n  layer_flatten(input_shape = c(28, 28)) %>%\n  layer_dense(units = 128, activation = 'relu') %>%\n  layer_dense(units = 10, activation = 'softmax')\n\n# Compile the model\nmodel %>% compile(\n  optimizer = 'adam', \n  loss = 'sparse_categorical_crossentropy',\n  metrics = c('accuracy')\n)\n \n# Train the mdoel\nmodel %>% fit(train_images, train_labels, epochs = 5, verbose = 2)\n\n# Evaluate accuracy\nscore <- model %>% evaluate(test_images, test_labels, verbose = 0)\nscore\n\n     loss  accuracy \n0.3614648 0.8725000 \n\n# Make Predictions\npredictions <- model %>% predict(test_images)\npredictions[1, ] %>% which.max()\n\n[1] 10\n\n\n\n\n\n\n## 1. Create function\nplot_predictions <- function(idx) {\n  \n  # Get image in the correct format\n  image_test <- test_images[idx, , ] %>% \n                    as_tibble(.name_repair = \"unique\") %>% \n                    set_names( seq_len(ncol(.)) ) %>% \n                    mutate(y = seq_len(nrow(.))) %>% \n                    pivot_longer(cols = c(1:28), \n                                 names_to        = \"x\", \n                                 values_to       = \"value\", \n                                 names_transform = list(x = as.integer))\n\n  # Get true and predicted labels\n  # subtract 1 as labels go from 0 to 9\n  predicted_label <- which.max(predictions[idx, ]) - 1\n  true_label      <- test_labels[idx]\n  color           <- ifelse(predicted_label == true_label, \"#008800\", \"#bb0000\")\n  \n  # Plot\n  g <- image_test %>% \n          ggplot(aes(x = x, y = y, fill = value)) +\n          geom_tile() +\n          scale_fill_gradient(low = \"white\", high = \"black\", na.value = NA) +\n          scale_y_reverse() +\n          theme_minimal() +\n          theme(panel.grid = element_blank(),\n                legend.position = \"none\",\n                axis.text = element_blank(),\n                axis.title.x = element_text(color = color, face = \"bold\")) + \n          xlab(paste0(\n            class_names[predicted_label + 1], \n            \" (\",\n            class_names[true_label + 1], \")\")) +\n          ylab(\"\")\n  \n    return(g)\n\n}\n\n## 2. map over indices\npredictions_lst <- map(c(1:25), plot_predictions)\n\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\nNew names:\n* `` -> `...1`\n* `` -> `...2`\n* `` -> `...3`\n* `` -> `...4`\n* `` -> `...5`\n* `` -> `...6`\n* `` -> `...7`\n* `` -> `...8`\n* `` -> `...9`\n* `` -> `...10`\n* `` -> `...11`\n* `` -> `...12`\n* `` -> `...13`\n* `` -> `...14`\n* `` -> `...15`\n* `` -> `...16`\n* `` -> `...17`\n* `` -> `...18`\n* `` -> `...19`\n* `` -> `...20`\n* `` -> `...21`\n* `` -> `...22`\n* `` -> `...23`\n* `` -> `...24`\n* `` -> `...25`\n* `` -> `...26`\n* `` -> `...27`\n* `` -> `...28`\n\n## 3. Plot list\nplot_grid(plotlist = predictions_lst)\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(imager)\n\nLoading required package: magrittr\n\n\n\nAttaching package: 'magrittr'\n\n\nThe following object is masked from 'package:rlang':\n\n    set_names\n\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n\n\n\nAttaching package: 'imager'\n\n\nThe following object is masked from 'package:magrittr':\n\n    add\n\n\nThe following object is masked from 'package:cowplot':\n\n    draw_text\n\n\nThe following object is masked from 'package:stringr':\n\n    boundary\n\n\nThe following object is masked from 'package:dplyr':\n\n    where\n\n\nThe following object is masked from 'package:tidyr':\n\n    fill\n\n\nThe following objects are masked from 'package:stats':\n\n    convolve, spectrum\n\n\nThe following object is masked from 'package:graphics':\n\n    frame\n\n\nThe following object is masked from 'package:base':\n\n    save.image\n\nimg_new <- load.image(\"t-shirt.jpg\") %>% \n                resize(size_x = 28, size_y = 28, size_z = 1, size_c = 1) %>% \n                imrotate(angle = -90) %>% \n                as.array() %>% \n                drop() %>% \n                array(dim = c(1,28,28)) %>% \n                subtract(1) %>% \n                abs() \n\npar(mfrow=c(1,2)) # set the plotting area into a 1*2 array   \nplot(as.cimg(img_new[1,,]),     main = \"img_new\",  axes=FALSE)\nplot(as.cimg(test_images[1,,]), main = \"img_test\", axes=FALSE)\n\n\n\n\n\n\n\npredictions <- model %>% predict(img_new[1, , , drop = FALSE])\nprediction  <- predictions[1, ] - 1\nwhich.max(prediction)\n\n[1] 1\n\n## [1] 1\n\nclass_pred <- model %>% predict(img_new) %>% which.max() - 1\nclass_pred\n\n[1] 0\n\n## [1] 0\nclass_names[class_pred + 1]\n\n[1] \"T-shirt/top\"\n\n## [1] \"T-shirt/top\""
  },
  {
    "objectID": "src/Data/06_deep_learning.html#preprocess-data",
    "href": "src/Data/06_deep_learning.html#preprocess-data",
    "title": "Deep Learning",
    "section": "Preprocess data",
    "text": "Preprocess data\nSince there is no column named “Target” i left that statement commented out.\n\n# Prune the data\nchurn_data_tbl <- churn_data_raw %>%\n                  select(-customerID) %>% # Remove customerId column\n                  drop_na(TotalCharges) %>% # Drop Not a number from Total Charges\n                  select(Churn,everything())\n\n# Split test/training sets\nset.seed(100)\nsplit_obj <- rsample::initial_split(churn_data_tbl, prop   = 0.80)\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\n\nchurn_data_tbl %>% ggplot(aes(x = tenure)) + \n                     geom_histogram(binwidth = 0.5, fill =  \"#2DC6D6\") +\n                     labs(\n                       title = \"Tenure Counts Without Binning\",\n                       x     = \"tenure (month)\"\n                       )\n\n\n\n\n\n\n\nchurn_data_tbl %>% ggplot(aes(x = tenure)) + \n  geom_histogram(bins = 6, color = \"white\", fill =  \"#2DC6D6\") +\n  labs(\n    title = \"Tenure Counts With Six Bins\",\n    x     = \"tenure (month)\"\n  )"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#log-transformation",
    "href": "src/Data/06_deep_learning.html#log-transformation",
    "title": "Deep Learning",
    "section": "Log transformation",
    "text": "Log transformation\n\n# Determine if log transformation improves correlation \n# between TotalCharges and Churn\n\ntrain_tbl %>%\n    select(Churn, TotalCharges) %>%\n    mutate(\n        Churn = Churn %>% as.factor() %>% as.numeric(),\n        LogTotalCharges = log(TotalCharges)\n        ) %>%\n    correlate() %>%\n    focus(Churn) %>%\n    fashion()\n\nCorrelation computed with\n* Method: 'pearson'\n* Missing treated using: 'pairwise.complete.obs'\n\n\n             term Churn\n1    TotalCharges  -.21\n2 LogTotalCharges  -.25\n\nchurn_data_tbl %>% \n        pivot_longer(cols      = c(Contract, InternetService, MultipleLines, PaymentMethod), \n                     names_to  = \"feature\", \n                     values_to = \"category\") %>% \n        ggplot(aes(category)) +\n          geom_bar(fill = \"#2DC6D6\") +\n          facet_wrap(~ feature, scales = \"free\") +\n          labs(\n            title = \"Features with multiple categories: Need to be one-hot encoded\"\n          ) +\n          theme(axis.text.x = element_text(angle = 25, \n                                           hjust = 1))"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#section",
    "href": "src/Data/06_deep_learning.html#section",
    "title": "Deep Learning",
    "section": "",
    "text": "rec_obj <- recipe(Churn ~ ., data = train_tbl) %>%\n    step_rm(Churn) %>% \n    step_discretize(tenure, options = list(cuts = 6)) %>%\n    step_log(TotalCharges) %>%\n    step_dummy(all_nominal(), -all_outcomes(), one_hot = T) %>%\n    step_center(all_predictors(), -all_outcomes()) %>%\n    step_scale(all_predictors(), -all_outcomes()) %>%\n    prep(data = train_tbl)\n\n# Predictors\nx_train_tbl <- bake( rec_obj , train_tbl )\nx_test_tbl  <- bake( rec_obj , test_tbl )\n\n# Response variables for training and testing sets\ny_train_vec <- ifelse( train_tbl$Churn == \"Yes\",1,0 )\ny_test_vec  <- ifelse( test_tbl$Churn == \"Yes\",1,0 )"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#build-keras-model",
    "href": "src/Data/06_deep_learning.html#build-keras-model",
    "title": "Deep Learning",
    "section": "Build keras model",
    "text": "Build keras model\n\n# Building our Artificial Neural Network\nmodel_keras <- keras_model_sequential()\n\nmodel_keras %>% \n    # First hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\", \n        input_shape        = ncol(x_train_tbl)) %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Second hidden layer\n    layer_dense(\n        units              = 16, \n        kernel_initializer = \"uniform\", \n        activation         = \"relu\") %>% \n    # Dropout to prevent overfitting\n    layer_dropout(rate = 0.1) %>%\n    # Output layer\n    layer_dense(\n        units              = 1, \n        kernel_initializer = \"uniform\", \n        activation         = \"sigmoid\") %>% \n    # Compile ANN\n    compile(\n        optimizer = 'adam',\n        loss      = 'binary_crossentropy',\n        metrics   = c('accuracy')\n    )\nmodel_keras\n\nModel: \"sequential\"\n________________________________________________________________________________\n Layer (type)                       Output Shape                    Param #     \n================================================================================\n dense_2 (Dense)                    (None, 16)                      816         \n dropout_1 (Dropout)                (None, 16)                      0           \n dense_1 (Dense)                    (None, 16)                      272         \n dropout (Dropout)                  (None, 16)                      0           \n dense (Dense)                      (None, 1)                       17          \n================================================================================\nTotal params: 1,105\nTrainable params: 1,105\nNon-trainable params: 0\n________________________________________________________________________________\n\nx_train_mtx = as.matrix(x_train_tbl)\ny_train_mtx = as.matrix(y_train_vec)\nx_test_mtx = as.matrix(x_test_tbl)\ny_test_mtx = as.matrix(y_test_vec)\n\n# Fit the keras model to the training data\nfit_keras <- fit(\n    model_keras,\n    batch_size       = 50 , \n    epochs           = 35 , \n    validation_split = 0.3,\n    x = x_train_mtx,\n    y = y_train_mtx,\n    validation_data = list(x_test_mtx,y_test_mtx)\n    )\n\nfit_keras\n\n\nFinal epoch (plot to see history):\n        loss: 0.3941\n    accuracy: 0.819\n    val_loss: 0.4285\nval_accuracy: 0.7903"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#predictions",
    "href": "src/Data/06_deep_learning.html#predictions",
    "title": "Deep Learning",
    "section": "Predictions",
    "text": "Predictions\n\n# Predicted Class\nyhat_keras_class_vec <- predict(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n    as.vector() %>%\n    round()\n\n# Predicted Class Probability\nyhat_keras_prob_vec  <- predict(object = model_keras, x = as.matrix(x_test_tbl)) %>%\n    as.vector() %>%\n    round()\n\n# Format test data and predictions for yardstick metrics\nestimates_keras_tbl <- tibble(\n    truth      = as.factor(y_test_vec) %>% fct_recode(yes = \"1\", no = \"0\"),\n    estimate   = as.factor(yhat_keras_class_vec) %>% fct_recode(yes = \"1\", no = \"0\"),\n    class_prob = yhat_keras_prob_vec\n)\n\nestimates_keras_tbl\n\n# A tibble: 1,407 x 3\n   truth estimate class_prob\n   <fct> <fct>         <dbl>\n 1 yes   no                0\n 2 no    no                0\n 3 no    no                0\n 4 no    no                0\n 5 no    no                0\n 6 no    no                0\n 7 no    no                0\n 8 no    no                0\n 9 no    no                0\n10 yes   yes               1\n# i 1,397 more rows\n\n# Confusion matrix\nconfusion_matrix <- estimates_keras_tbl %>% conf_mat(truth,estimate)\nconfusion_matrix\n\n          Truth\nPrediction  no yes\n       no  926 174\n       yes 121 186\n\n# Accuracy\nacc <- estimates_keras_tbl %>% accuracy(truth,estimate)\nacc\n\n# A tibble: 1 x 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.790\n\n# AUC\nauc <- estimates_keras_tbl %>% roc_auc(truth,class_prob,event_level=\"second\")\nauc\n\n# A tibble: 1 x 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.701\n\n# Precision\ntibble(\n    precision = estimates_keras_tbl %>% precision(truth,estimate),\n    recall    = estimates_keras_tbl %>% recall(truth,estimate)\n)\n\n# A tibble: 1 x 2\n  precision$.metric $.estimator $.estimate recall$.metric $.estimator $.estimate\n  <chr>             <chr>            <dbl> <chr>          <chr>            <dbl>\n1 precision         binary           0.842 recall         binary           0.884\n\n# F1-Statistic\nestimates_keras_tbl %>% f_meas(truth, estimate, beta = 1)\n\n# A tibble: 1 x 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 f_meas  binary         0.863"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#lime",
    "href": "src/Data/06_deep_learning.html#lime",
    "title": "Deep Learning",
    "section": "Lime",
    "text": "Lime\n\nclass(model_keras)\n\n [1] \"keras.engine.sequential.Sequential\"                     \n [2] \"keras.engine.functional.Functional\"                     \n [3] \"keras.engine.training.Model\"                            \n [4] \"keras.engine.base_layer.Layer\"                          \n [5] \"tensorflow.python.module.module.Module\"                 \n [6] \"tensorflow.python.trackable.autotrackable.AutoTrackable\"\n [7] \"tensorflow.python.trackable.base.Trackable\"             \n [8] \"keras.utils.version_utils.LayerVersionSelector\"         \n [9] \"keras.utils.version_utils.ModelVersionSelector\"         \n[10] \"python.builtin.object\"                                  \n\n# Setup lime::model_type() function for keras\nmodel_type.keras.engine.sequential.Sequential  <- function(x, ...) {\n    return(\"classification\")\n}\n\n# Setup lime::predict_model() function for keras\npredict_model.keras.engine.sequential.Sequential <- function(x, newdata, type, ...) {\n    pred <- predict(object = x, x = as.matrix(newdata))\n    return(data.frame(Yes = pred, No = 1 - pred))\n}\n\nlibrary(lime)\n# Test our predict_model() function\npredict_model(x = model_keras, newdata = x_test_tbl, type = 'raw') %>%\n    tibble::as_tibble()\n\n# A tibble: 1,407 x 2\n      Yes    No\n    <dbl> <dbl>\n 1 0.275  0.725\n 2 0.142  0.858\n 3 0.142  0.858\n 4 0.287  0.713\n 5 0.0206 0.979\n 6 0.0268 0.973\n 7 0.0123 0.988\n 8 0.325  0.675\n 9 0.403  0.597\n10 0.771  0.229\n# i 1,397 more rows\n\n# Run lime() on training set\nexplainer <- lime::lime(\n    x            = x_train_tbl, \n    model            = model_keras,\n    bin_continuous = FALSE)\n\nWarning: SeniorCitizen does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: gender_Female does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: gender_Male does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: Partner_No does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: Partner_Yes does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: Dependents_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: Dependents_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: tenure_bin1 does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: tenure_bin2 does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: tenure_bin3 does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: tenure_bin4 does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: tenure_bin5 does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: tenure_bin6 does not contain enough variance to use quantile binning.\nUsing standard binning instead.\n\n\nWarning: PhoneService_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: PhoneService_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: MultipleLines_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: MultipleLines_No.phone.service does not contain enough variance to use\nquantile binning. Using standard binning instead.\n\n\nWarning: MultipleLines_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: InternetService_DSL does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: InternetService_Fiber.optic does not contain enough variance to use\nquantile binning. Using standard binning instead.\n\n\nWarning: InternetService_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: OnlineSecurity_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: OnlineSecurity_No.internet.service does not contain enough variance to\nuse quantile binning. Using standard binning instead.\n\n\nWarning: OnlineSecurity_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: OnlineBackup_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: OnlineBackup_No.internet.service does not contain enough variance to\nuse quantile binning. Using standard binning instead.\n\n\nWarning: OnlineBackup_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: DeviceProtection_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: DeviceProtection_No.internet.service does not contain enough variance\nto use quantile binning. Using standard binning instead.\n\n\nWarning: DeviceProtection_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: TechSupport_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: TechSupport_No.internet.service does not contain enough variance to\nuse quantile binning. Using standard binning instead.\n\n\nWarning: TechSupport_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: StreamingTV_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: StreamingTV_No.internet.service does not contain enough variance to\nuse quantile binning. Using standard binning instead.\n\n\nWarning: StreamingTV_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: StreamingMovies_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: StreamingMovies_No.internet.service does not contain enough variance\nto use quantile binning. Using standard binning instead.\n\n\nWarning: StreamingMovies_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: Contract_Month.to.month does not contain enough variance to use\nquantile binning. Using standard binning instead.\n\n\nWarning: Contract_One.year does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: Contract_Two.year does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: PaperlessBilling_No does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: PaperlessBilling_Yes does not contain enough variance to use quantile\nbinning. Using standard binning instead.\n\n\nWarning: PaymentMethod_Bank.transfer..automatic. does not contain enough\nvariance to use quantile binning. Using standard binning instead.\n\n\nWarning: PaymentMethod_Credit.card..automatic. does not contain enough variance\nto use quantile binning. Using standard binning instead.\n\n\nWarning: PaymentMethod_Electronic.check does not contain enough variance to use\nquantile binning. Using standard binning instead.\n\n\nWarning: PaymentMethod_Mailed.check does not contain enough variance to use\nquantile binning. Using standard binning instead.\n\nexplanation <- lime::explain(\n    x = x_test_tbl[1:10,], \n    explainer    = explainer, \n    n_labels     = 2, \n    n_features   = 50)"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#plot",
    "href": "src/Data/06_deep_learning.html#plot",
    "title": "Deep Learning",
    "section": "Plot",
    "text": "Plot\n\nplot_features(explanation)\n\n\n\n\n\n\n\nplot_explanations(explanation)"
  },
  {
    "objectID": "src/Data/06_deep_learning.html#correlation-analysis",
    "href": "src/Data/06_deep_learning.html#correlation-analysis",
    "title": "Deep Learning",
    "section": "Correlation analysis",
    "text": "Correlation analysis\n\nFeature correlations to Churn\n\ncorrr_analysis <- x_train_tbl %>%\n    mutate(Churn = y_train_vec) %>%\n    correlate() %>%\n    focus(Churn) %>%\n    rename(feature = term) %>% # Changed rowname to term\n    arrange(abs(Churn)) %>%\n    mutate(feature = as_factor(feature)) \n\nCorrelation computed with\n* Method: 'pearson'\n* Missing treated using: 'pairwise.complete.obs'\n\ncorrr_analysis\n\n# A tibble: 50 x 2\n   feature                           Churn\n   <fct>                             <dbl>\n 1 tenure_bin3                    -0.00179\n 2 gender_Female                   0.00421\n 3 gender_Male                    -0.00421\n 4 PhoneService_No                -0.0111 \n 5 PhoneService_Yes                0.0111 \n 6 MultipleLines_No.phone.service -0.0111 \n 7 MultipleLines_No               -0.0353 \n 8 MultipleLines_Yes               0.0424 \n 9 StreamingMovies_Yes             0.0518 \n10 StreamingTV_Yes                 0.0590 \n# i 40 more rows\n\n\n\n\nCorrelation visualization\n\ncorrr_analysis %>%\n  ggplot(aes(x = Churn, y = fct_reorder(feature, desc(Churn)))) +\n  geom_point() +\n  \n  # Positive Correlations - Contribute to churn\n  geom_segment(aes(xend = 0, yend = feature), \n               color = \"red\", \n               data = corrr_analysis %>% filter(Churn > 0)) +\n  geom_point(color = \"red\", \n             data = corrr_analysis %>% filter(Churn > 0)) +\n  \n  # Negative Correlations - Prevent churn\n  geom_segment(aes(xend = 0, yend = feature), \n               color = \"#2DC6D6\", \n               data = corrr_analysis %>% filter(Churn < 0)) +\n  geom_point(color = \"#2DC6D6\", \n             data = corrr_analysis %>% filter(Churn < 0)) +\n  \n  # Vertical lines\n  geom_vline(xintercept = 0, color = \"#f1fa8c\", size = 1, linetype = 2) +\n  geom_vline(xintercept = 0.25, color = \"#f1fa8c\", size = 0.5, linetype = 2) +\n  geom_vline(xintercept = -0.25, color = \"#f1fa8c\", size = 0.5, linetype = 2) +\n  \n  # Aesthetics\n  labs(x = \"Churn\", y = \"Feature Importance\", title = \"Churn Correlation Analysis\\nPositive Correlations (contribute to churn), Negative Correlations (prevent Churn)\",)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\ni Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nBDML fertig stellen Gucken, ob beide Webseiten online gehen Gucken, ob das Password für beide funktioniert Beide Formulare neu ausfüllen"
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html",
    "href": "src/Data/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "src/Data/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT~\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, ~\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53~\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68~\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01~\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09~\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5~\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1~\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% #Take sp_500_prices_tbl\n                            select(symbol,date,adjusted) %>% #Select symbol, date and adjusted\n                            filter(date > \"2018-01-01\") %>% #Filter for newer then 2018\n                            group_by(symbol) %>%\n                            mutate(lag = lag(adjusted)) %>% #Compute lagged adjusted\n                            ungroup() %>%\n                            filter(!is.na(lag)) %>% #Filter for not a number\n                            mutate(pct_return = (adjusted - lag) / lag) %>% #Compute pct_return\n                            select(symbol,date,pct_return) %>% #Select symobl,date and pct_return\n                            as_tibble() #Convert to tibble\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "src/Data/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 x 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# i 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%\n                         pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "src/Data/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\nstock_date_matrix_tbl\n\n# A tibble: 502 x 283\n   symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n   <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n 1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n 2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n 3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n 4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n 5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n 6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n 7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n 8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n 9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n# i 492 more rows\n# i 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, ...\n\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>%\n              select(-symbol) %>% #Drop the symbol column\n              kmeans(centers=4,nstart=20)\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\ntot_withinss <- glance(kmeans_obj)$tot.withinss\ntot_withinss\n\n[1] 29.20555"
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "src/Data/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers=1:30) %>% #Create a tibble with centers from 1 to 30\n                      mutate(k_means = map(centers,kmeans_mapper)) %>% #Compute k_means column\n                      mutate(glance = map(k_means,glance)) #Add glance column\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>% unnest(glance) %>%#Unnest the glance column\n                       ggplot(aes(x=centers,y=tot.withinss)) +\n                       geom_point() +\n                       geom_line() +\n                       ggtitle(\"Scree Plot\") +\n                       theme_dark()\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "src/Data/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results <- stock_date_matrix_tbl  %>%\n                select(-symbol) %>% #De-select the `symbol` column\n                umap()\n\n'as(<dgTMatrix>, \"dgCMatrix\")' is deprecated.\nUse 'as(., \"CsparseMatrix\")' instead.\nSee help(\"Deprecated\") and help(\"Matrix-deprecated\").\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>% as_tibble() #Convert from a `matrix` data type to a `tibble`\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\ni Using compatibility `.name_repair`.\n\n                    bind_cols(stock_date_matrix_tbl$symbol) #Bind with symbol column from the stock_date_matrix_tbl\n\nNew names:\n* `` -> `...1`\n\n\n# A tibble: 502 x 1\n   ...1 \n   <chr>\n 1 A    \n 2 AAL  \n 3 AAP  \n 4 AAPL \n 5 ABBV \n 6 ABC  \n 7 ABMD \n 8 ABT  \n 9 ACN  \n10 ADBE \n# i 492 more rows\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>% ggplot(aes(x=V1,y=V2)) +\n                     geom_point(alpha=0.5)\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "src/Data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "src/Data/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl %>%\n               filter(centers == 10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl <- k_means_obj %>% #Begin with the `k_means_obj`\n                           bind_cols(stock_date_matrix_tbl) %>% #Augment\n                           select(symbol,k_means) %>% #Select columns\n                           left_join(umap_results_tbl,by=\"symbol\") %>%\n                           left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %>% ggplot(aes(x = V1, y = V2, color = factor(k_means))) +\n  geom_point(alpha = 0.5) +\n  ggtitle(\"K-Means and UMAP results\") +\n  scale_color_manual(values = palette_light() %>% rep(3))\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "src/Data/performance_measures_business_case.html",
    "href": "src/Data/performance_measures_business_case.html",
    "title": "Performance Measures",
    "section": "",
    "text": "library(h2o)\nlibrary(tidyverse)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(readxl)\n\nprocess_hr_data_readable <- function(data, definitions_tbl) {\n  \n  definitions_list <- definitions_tbl %>%\n    fill(...1, .direction = \"down\") %>%\n    filter(!is.na(...2)) %>%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %>%\n    rename(column_name = ...1) %>%\n    mutate(key = as.numeric(key)) %>%\n    mutate(value = value %>% str_replace(pattern = \"'\", replacement = \"\")) %>%\n    split(.$column_name) %>%\n    map(~ select(., -column_name)) %>%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name <- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl <- list(HR_Data = data) %>%\n    append(definitions_list, after = 1) %>%\n    reduce(left_join) %>%\n    select(-one_of(names(definitions_list))) %>%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %>%\n    select(sort(names(.))) %>%\n    mutate_if(is.character, as.factor) %>%\n    mutate(\n      BusinessTravel = BusinessTravel %>% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %>% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n\nemployee_attrition_tbl          <- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndefinitions_raw_tbl             <- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\nset.seed(seed = 1113)\nsplit_obj                       <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\ntrain_readable_tbl              <- training(split_obj)\ntest_readable_tbl               <- testing(split_obj)\n\nrecipe_obj <- recipe(Attrition ~., data = train_readable_tbl) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(JobLevel, StockOptionLevel, fn = as.factor) %>% \n  prep()\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n# Modeling\nh2o.init()\n\n# Split data into a training and a validation data frame\n# Setting the seed is just for reproducability\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n# Set the target and predictors\ny <- \"Attrition\"\nx <- setdiff(names(train_h2o), y)\n\n# ?h2o.automl\n\nautoml_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 30,\n  nfolds            = 5 \n)\n\n# Extracts and H2O model name by a position so can more easily use h2o.getModel()\nextract_h2o_model_name_by_position <- function(h2o_leaderboard, n = 1, verbose = T) {\n  \n  model_name <- h2o_leaderboard %>%\n    as.tibble() %>%\n    slice(n) %>%\n    pull(model_id)\n  \n  if (verbose) message(model_name)\n  \n  return(model_name)\n  \n}\n\nleader_model <- automl_models_h2o@leaderboard %>% \n  extract_h2o_model_name_by_position() %>%\n  h2o.getModel()\n\npredictions <- h2o.predict(leader_model, newdata = as.h2o(test_tbl))\n\npredictions_tbl <- predictions %>% as_tibble()\n\nleader_model@allparameters\n\n\n\n\n\nplot_h2o_leaderboard <- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by <- tolower(order_by[[1]])\n\n    leaderboard_tbl <- h2o_leaderboard %>%\n        as.tibble() %>%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        rownames_to_column(var = \"rowname\") %>%\n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %>%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl <- leaderboard_tbl %>%\n            slice(1:n_max) %>%\n            mutate(\n                model_id   = as_factor(model_id) %>% reorder(logloss) %>% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %>%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g <- data_transformed_tbl %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g <- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n\n}\nplot_h2o_leaderboard(automl_models_h2o@leaderboard)\n\n\n\n\n\ndeeplearning_grid_01 <- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n# deeplearning_grid_01\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\ndeeplearning_grid_01_model_1 <- h2o.getModel(\"deeplearning_grid_01_model_1\")\n\n# deeplearning_grid_01_model_1 %>% h2o.auc(train = T, valid = T, xval = T)\n\ndeeplearning_grid_01_model_1 %>% h2o.performance(newdata = as.h2o(test_tbl))\n\n\n\n\n\n# 4. Assessing Performance ----\nperformance_h2o <- h2o.performance(leader_model, newdata = as.h2o(test_tbl))\n\ntypeof(performance_h2o)\nperformance_h2o %>% slotNames()\n\n# We are focusing on the slot metrics. This slot contains all possible metrics\nperformance_h2o@metrics\n\n# Caution: \"train, \"val\", and \"xval\" arugments only work for models (not performance objects)\nh2o.auc(leader_model, train = T, valid = T, xval = T)\nh2o.giniCoef(performance_h2o)\nh2o.logloss(performance_h2o)\n# result for the hold out set\nh2o.confusionMatrix(performance_h2o)\n\n# Precision vs Recall Plot\n\n# This is on the test set\nperformance_tbl <- performance_h2o %>%\n    h2o.metric() %>%\n    as.tibble() \n\nperformance_tbl %>% \n  glimpse()\n\n\n\n\n\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      )\n\nperformance_tbl %>%\n    filter(f1 == max(f1))\n\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\n\n\n\n\nranked_predictions_tbl <- predictions_tbl %>%\n    bind_cols(test_tbl) %>%\n    select(predict:Yes, Attrition) %>%\n    # Sorting from highest to lowest class probability\n    arrange(desc(Yes))\n\nranked_predictions_tbl %>%\n    mutate(ntile = ntile(Yes, n = 10)) %>%\n    group_by(ntile) %>%\n    summarise(\n        cases = n(),\n        responses = sum(Attrition == \"Yes\")\n    ) %>%\n    arrange(desc(ntile))\n\ncalculated_gain_lift_tbl <- ranked_predictions_tbl %>%\n    mutate(ntile = ntile(Yes, n = 10)) %>%\n    group_by(ntile) %>%\n    summarise(\n        cases = n(),\n        responses = sum(Attrition == \"Yes\")\n    ) %>%\n    arrange(desc(ntile)) %>%\n    \n    # Add group numbers (opposite of ntile)\n    mutate(group = row_number()) %>%\n    select(group, cases, responses) %>%\n    \n    # Calculations\n    mutate(\n        cumulative_responses = cumsum(responses),\n        pct_responses        = responses / sum(responses),\n        gain                 = cumsum(pct_responses),\n        cumulative_pct_cases = cumsum(cases) / sum(cases),\n        lift                 = gain / cumulative_pct_cases,\n        gain_baseline        = cumulative_pct_cases,\n        lift_baseline        = gain_baseline / cumulative_pct_cases\n    )\n\ncalculated_gain_lift_tbl \n\ngain_lift_tbl <- performance_h2o %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\n## Gain Chart\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n\n## Lift Plot\n\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n\n\n\n\n\n# 5. Performance Visualization ----  \nlibrary(cowplot)\nlibrary(glue)\n\n\n# set values to test the function while building it\nh2o_leaderboard <- automl_models_h2o@leaderboard\nnewdata <- test_tbl\norder_by <- \"auc\"\nmax_models <- 4\nsize <- 1\n\nplot_h2o_performance <- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl <- h2o_leaderboard %>%\n        as_tibble() %>%\n        slice(1:max_models)\n    \n    newdata_tbl <- newdata %>%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      <- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr <- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %>%\n            h2o.metric() %>%\n            as.tibble() %>%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n          model_id = as_factor(model_id) %>% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %>% \n                      round(3) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %>% \n                      round(4) %>% \n                      as.character() %>% \n                      as_factor() %>% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 <- model_metrics_tbl %>%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 <- model_metrics_tbl %>%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift <- function(model_id, test_tbl) {\n        \n        model_h2o <- h2o.getModel(model_id)\n        perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %>%\n            h2o.gainsLift() %>%\n            as.tibble() %>%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl <- leaderboard_tbl %>%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %>%\n        unnest(cols = metrics) %>%\n        mutate(\n            model_id = as_factor(model_id) %>% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %>% \n                round(3) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %>% \n                round(4) %>% \n                as.character() %>% \n                as_factor() %>% \n                fct_reorder(as.numeric(model_id))\n        ) %>%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 <- gain_lift_tbl %>%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend <- get_legend(p1)\n    # Remove legend from p1\n    p1 <- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p <- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title <- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle <- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret <- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %>%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)"
  }
]